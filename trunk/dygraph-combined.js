/***

    MochiKit.MochiKit 1.4 : PACKED VERSION

    THIS FILE IS AUTOMATICALLY GENERATED.  If creating patches, please
    diff against the source tree, not this file.

    See <http://mochikit.com/> for documentation, downloads, license, etc.

    (c) 2005 Bob Ippolito.  All rights Reserved.

***/

if(typeof (dojo)!="undefined"){
dojo.provide("MochiKit.Base");
}
if(typeof (MochiKit)=="undefined"){
MochiKit={};
}
if(typeof (MochiKit.Base)=="undefined"){
MochiKit.Base={};
}
if(typeof (MochiKit.__export__)=="undefined"){
MochiKit.__export__=(MochiKit.__compat__||(typeof (JSAN)=="undefined"&&typeof (dojo)=="undefined"));
}
MochiKit.Base.VERSION="1.4";
MochiKit.Base.NAME="MochiKit.Base";
MochiKit.Base.update=function(_1,_2){
if(_1===null){
_1={};
}
for(var i=1;i<arguments.length;i++){
var o=arguments[i];
if(typeof (o)!="undefined"&&o!==null){
for(var k in o){
_1[k]=o[k];
}
}
}
return _1;
};
MochiKit.Base.update(MochiKit.Base,{__repr__:function(){
return "["+this.NAME+" "+this.VERSION+"]";
},toString:function(){
return this.__repr__();
},camelize:function(_6){
var _7=_6.split("-");
var cc=_7[0];
for(var i=1;i<_7.length;i++){
cc+=_7[i].charAt(0).toUpperCase()+_7[i].substring(1);
}
return cc;
},counter:function(n){
if(arguments.length===0){
n=1;
}
return function(){
return n++;
};
},clone:function(_b){
var me=arguments.callee;
if(arguments.length==1){
me.prototype=_b;
return new me();
}
},_flattenArray:function(_d,_e){
for(var i=0;i<_e.length;i++){
var o=_e[i];
if(o instanceof Array){
arguments.callee(_d,o);
}else{
_d.push(o);
}
}
return _d;
},flattenArray:function(lst){
return MochiKit.Base._flattenArray([],lst);
},flattenArguments:function(lst){
var res=[];
var m=MochiKit.Base;
var _15=m.extend(null,arguments);
while(_15.length){
var o=_15.shift();
if(o&&typeof (o)=="object"&&typeof (o.length)=="number"){
for(var i=o.length-1;i>=0;i--){
_15.unshift(o[i]);
}
}else{
res.push(o);
}
}
return res;
},extend:function(_18,obj,_1a){
if(!_1a){
_1a=0;
}
if(obj){
var l=obj.length;
if(typeof (l)!="number"){
if(typeof (MochiKit.Iter)!="undefined"){
obj=MochiKit.Iter.list(obj);
l=obj.length;
}else{
throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
}
}
if(!_18){
_18=[];
}
for(var i=_1a;i<l;i++){
_18.push(obj[i]);
}
}
return _18;
},updatetree:function(_1d,obj){
if(_1d===null){
_1d={};
}
for(var i=1;i<arguments.length;i++){
var o=arguments[i];
if(typeof (o)!="undefined"&&o!==null){
for(var k in o){
var v=o[k];
if(typeof (_1d[k])=="object"&&typeof (v)=="object"){
arguments.callee(_1d[k],v);
}else{
_1d[k]=v;
}
}
}
}
return _1d;
},setdefault:function(_23,obj){
if(_23===null){
_23={};
}
for(var i=1;i<arguments.length;i++){
var o=arguments[i];
for(var k in o){
if(!(k in _23)){
_23[k]=o[k];
}
}
}
return _23;
},keys:function(obj){
var _29=[];
for(var _2a in obj){
_29.push(_2a);
}
return _29;
},values:function(obj){
var _2c=[];
for(var _2d in obj){
_2c.push(obj[_2d]);
}
return _2c;
},items:function(obj){
var _2f=[];
var e;
for(var _31 in obj){
var v;
try{
v=obj[_31];
}
catch(e){
continue;
}
_2f.push([_31,v]);
}
return _2f;
},_newNamedError:function(_33,_34,_35){
_35.prototype=new MochiKit.Base.NamedError(_33.NAME+"."+_34);
_33[_34]=_35;
},operator:{truth:function(a){
return !!a;
},lognot:function(a){
return !a;
},identity:function(a){
return a;
},not:function(a){
return ~a;
},neg:function(a){
return -a;
},add:function(a,b){
return a+b;
},sub:function(a,b){
return a-b;
},div:function(a,b){
return a/b;
},mod:function(a,b){
return a%b;
},mul:function(a,b){
return a*b;
},and:function(a,b){
return a&b;
},or:function(a,b){
return a|b;
},xor:function(a,b){
return a^b;
},lshift:function(a,b){
return a<<b;
},rshift:function(a,b){
return a>>b;
},zrshift:function(a,b){
return a>>>b;
},eq:function(a,b){
return a==b;
},ne:function(a,b){
return a!=b;
},gt:function(a,b){
return a>b;
},ge:function(a,b){
return a>=b;
},lt:function(a,b){
return a<b;
},le:function(a,b){
return a<=b;
},seq:function(a,b){
return a===b;
},sne:function(a,b){
return a!==b;
},ceq:function(a,b){
return MochiKit.Base.compare(a,b)===0;
},cne:function(a,b){
return MochiKit.Base.compare(a,b)!==0;
},cgt:function(a,b){
return MochiKit.Base.compare(a,b)==1;
},cge:function(a,b){
return MochiKit.Base.compare(a,b)!=-1;
},clt:function(a,b){
return MochiKit.Base.compare(a,b)==-1;
},cle:function(a,b){
return MochiKit.Base.compare(a,b)!=1;
},logand:function(a,b){
return a&&b;
},logor:function(a,b){
return a||b;
},contains:function(a,b){
return b in a;
}},forwardCall:function(_73){
return function(){
return this[_73].apply(this,arguments);
};
},itemgetter:function(_74){
return function(arg){
return arg[_74];
};
},typeMatcher:function(){
var _76={};
for(var i=0;i<arguments.length;i++){
var typ=arguments[i];
_76[typ]=typ;
}
return function(){
for(var i=0;i<arguments.length;i++){
if(!(typeof (arguments[i]) in _76)){
return false;
}
}
return true;
};
},isNull:function(){
for(var i=0;i<arguments.length;i++){
if(arguments[i]!==null){
return false;
}
}
return true;
},isUndefinedOrNull:function(){
for(var i=0;i<arguments.length;i++){
var o=arguments[i];
if(!(typeof (o)=="undefined"||o===null)){
return false;
}
}
return true;
},isEmpty:function(obj){
return !MochiKit.Base.isNotEmpty.apply(this,arguments);
},isNotEmpty:function(obj){
for(var i=0;i<arguments.length;i++){
var o=arguments[i];
if(!(o&&o.length)){
return false;
}
}
return true;
},isArrayLike:function(){
for(var i=0;i<arguments.length;i++){
var o=arguments[i];
var typ=typeof (o);
if((typ!="object"&&!(typ=="function"&&typeof (o.item)=="function"))||o===null||typeof (o.length)!="number"||o.nodeType===3){
return false;
}
}
return true;
},isDateLike:function(){
for(var i=0;i<arguments.length;i++){
var o=arguments[i];
if(typeof (o)!="object"||o===null||typeof (o.getTime)!="function"){
return false;
}
}
return true;
},xmap:function(fn){
if(fn===null){
return MochiKit.Base.extend(null,arguments,1);
}
var _87=[];
for(var i=1;i<arguments.length;i++){
_87.push(fn(arguments[i]));
}
return _87;
},map:function(fn,lst){
var m=MochiKit.Base;
var itr=MochiKit.Iter;
var _8d=m.isArrayLike;
if(arguments.length<=2){
if(!_8d(lst)){
if(itr){
lst=itr.list(lst);
if(fn===null){
return lst;
}
}else{
throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
}
}
if(fn===null){
return m.extend(null,lst);
}
var _8e=[];
for(var i=0;i<lst.length;i++){
_8e.push(fn(lst[i]));
}
return _8e;
}else{
if(fn===null){
fn=Array;
}
var _90=null;
for(i=1;i<arguments.length;i++){
if(!_8d(arguments[i])){
if(itr){
return itr.list(itr.imap.apply(null,arguments));
}else{
throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
}
}
var l=arguments[i].length;
if(_90===null||_90>l){
_90=l;
}
}
_8e=[];
for(i=0;i<_90;i++){
var _92=[];
for(var j=1;j<arguments.length;j++){
_92.push(arguments[j][i]);
}
_8e.push(fn.apply(this,_92));
}
return _8e;
}
},xfilter:function(fn){
var _95=[];
if(fn===null){
fn=MochiKit.Base.operator.truth;
}
for(var i=1;i<arguments.length;i++){
var o=arguments[i];
if(fn(o)){
_95.push(o);
}
}
return _95;
},filter:function(fn,lst,_9a){
var _9b=[];
var m=MochiKit.Base;
if(!m.isArrayLike(lst)){
if(MochiKit.Iter){
lst=MochiKit.Iter.list(lst);
}else{
throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
}
}
if(fn===null){
fn=m.operator.truth;
}
if(typeof (Array.prototype.filter)=="function"){
return Array.prototype.filter.call(lst,fn,_9a);
}else{
if(typeof (_9a)=="undefined"||_9a===null){
for(var i=0;i<lst.length;i++){
var o=lst[i];
if(fn(o)){
_9b.push(o);
}
}
}else{
for(i=0;i<lst.length;i++){
o=lst[i];
if(fn.call(_9a,o)){
_9b.push(o);
}
}
}
}
return _9b;
},_wrapDumbFunction:function(_9f){
return function(){
switch(arguments.length){
case 0:
return _9f();
case 1:
return _9f(arguments[0]);
case 2:
return _9f(arguments[0],arguments[1]);
case 3:
return _9f(arguments[0],arguments[1],arguments[2]);
}
var _a0=[];
for(var i=0;i<arguments.length;i++){
_a0.push("arguments["+i+"]");
}
return eval("(func("+_a0.join(",")+"))");
};
},methodcaller:function(_a2){
var _a3=MochiKit.Base.extend(null,arguments,1);
if(typeof (_a2)=="function"){
return function(obj){
return _a2.apply(obj,_a3);
};
}else{
return function(obj){
return obj[_a2].apply(obj,_a3);
};
}
},method:function(_a6,_a7){
var m=MochiKit.Base;
return m.bind.apply(this,m.extend([_a7,_a6],arguments,2));
},compose:function(f1,f2){
var _ab=[];
var m=MochiKit.Base;
if(arguments.length===0){
throw new TypeError("compose() requires at least one argument");
}
for(var i=0;i<arguments.length;i++){
var fn=arguments[i];
if(typeof (fn)!="function"){
throw new TypeError(m.repr(fn)+" is not a function");
}
_ab.push(fn);
}
return function(){
var _af=arguments;
for(var i=_ab.length-1;i>=0;i--){
_af=[_ab[i].apply(this,_af)];
}
return _af[0];
};
},bind:function(_b1,_b2){
if(typeof (_b1)=="string"){
_b1=_b2[_b1];
}
var _b3=_b1.im_func;
var _b4=_b1.im_preargs;
var _b5=_b1.im_self;
var m=MochiKit.Base;
if(typeof (_b1)=="function"&&typeof (_b1.apply)=="undefined"){
_b1=m._wrapDumbFunction(_b1);
}
if(typeof (_b3)!="function"){
_b3=_b1;
}
if(typeof (_b2)!="undefined"){
_b5=_b2;
}
if(typeof (_b4)=="undefined"){
_b4=[];
}else{
_b4=_b4.slice();
}
m.extend(_b4,arguments,2);
var _b7=function(){
var _b8=arguments;
var me=arguments.callee;
if(me.im_preargs.length>0){
_b8=m.concat(me.im_preargs,_b8);
}
var _ba=me.im_self;
if(!_ba){
_ba=this;
}
return me.im_func.apply(_ba,_b8);
};
_b7.im_self=_b5;
_b7.im_func=_b3;
_b7.im_preargs=_b4;
return _b7;
},bindMethods:function(_bb){
var _bc=MochiKit.Base.bind;
for(var k in _bb){
var _be=_bb[k];
if(typeof (_be)=="function"){
_bb[k]=_bc(_be,_bb);
}
}
},registerComparator:function(_bf,_c0,_c1,_c2){
MochiKit.Base.comparatorRegistry.register(_bf,_c0,_c1,_c2);
},_primitives:{"boolean":true,"string":true,"number":true},compare:function(a,b){
if(a==b){
return 0;
}
var _c5=(typeof (a)=="undefined"||a===null);
var _c6=(typeof (b)=="undefined"||b===null);
if(_c5&&_c6){
return 0;
}else{
if(_c5){
return -1;
}else{
if(_c6){
return 1;
}
}
}
var m=MochiKit.Base;
var _c8=m._primitives;
if(!(typeof (a) in _c8&&typeof (b) in _c8)){
try{
return m.comparatorRegistry.match(a,b);
}
catch(e){
if(e!=m.NotFound){
throw e;
}
}
}
if(a<b){
return -1;
}else{
if(a>b){
return 1;
}
}
var _c9=m.repr;
throw new TypeError(_c9(a)+" and "+_c9(b)+" can not be compared");
},compareDateLike:function(a,b){
return MochiKit.Base.compare(a.getTime(),b.getTime());
},compareArrayLike:function(a,b){
var _ce=MochiKit.Base.compare;
var _cf=a.length;
var _d0=0;
if(_cf>b.length){
_d0=1;
_cf=b.length;
}else{
if(_cf<b.length){
_d0=-1;
}
}
for(var i=0;i<_cf;i++){
var cmp=_ce(a[i],b[i]);
if(cmp){
return cmp;
}
}
return _d0;
},registerRepr:function(_d3,_d4,_d5,_d6){
MochiKit.Base.reprRegistry.register(_d3,_d4,_d5,_d6);
},repr:function(o){
if(typeof (o)=="undefined"){
return "undefined";
}else{
if(o===null){
return "null";
}
}
try{
if(typeof (o.__repr__)=="function"){
return o.__repr__();
}else{
if(typeof (o.repr)=="function"&&o.repr!=arguments.callee){
return o.repr();
}
}
return MochiKit.Base.reprRegistry.match(o);
}
catch(e){
if(typeof (o.NAME)=="string"&&(o.toString==Function.prototype.toString||o.toString==Object.prototype.toString)){
return o.NAME;
}
}
try{
var _d8=(o+"");
}
catch(e){
return "["+typeof (o)+"]";
}
if(typeof (o)=="function"){
o=_d8.replace(/^\s+/,"");
var idx=o.indexOf("{");
if(idx!=-1){
o=o.substr(0,idx)+"{...}";
}
}
return _d8;
},reprArrayLike:function(o){
var m=MochiKit.Base;
return "["+m.map(m.repr,o).join(", ")+"]";
},reprString:function(o){
return ("\""+o.replace(/(["\\])/g,"\\$1")+"\"").replace(/[\f]/g,"\\f").replace(/[\b]/g,"\\b").replace(/[\n]/g,"\\n").replace(/[\t]/g,"\\t").replace(/[\r]/g,"\\r");
},reprNumber:function(o){
return o+"";
},registerJSON:function(_de,_df,_e0,_e1){
MochiKit.Base.jsonRegistry.register(_de,_df,_e0,_e1);
},evalJSON:function(){
return eval("("+arguments[0]+")");
},serializeJSON:function(o){
var _e3=typeof (o);
if(_e3=="number"||_e3=="boolean"){
return o+"";
}else{
if(o===null){
return "null";
}
}
var m=MochiKit.Base;
var _e5=m.reprString;
if(_e3=="string"){
return _e5(o);
}
var me=arguments.callee;
var _e7;
if(typeof (o.__json__)=="function"){
_e7=o.__json__();
if(o!==_e7){
return me(_e7);
}
}
if(typeof (o.json)=="function"){
_e7=o.json();
if(o!==_e7){
return me(_e7);
}
}
if(_e3!="function"&&typeof (o.length)=="number"){
var res=[];
for(var i=0;i<o.length;i++){
var val=me(o[i]);
if(typeof (val)!="string"){
val="undefined";
}
res.push(val);
}
return "["+res.join(", ")+"]";
}
try{
_e7=m.jsonRegistry.match(o);
if(o!==_e7){
return me(_e7);
}
}
catch(e){
if(e!=m.NotFound){
throw e;
}
}
if(_e3=="undefined"){
throw new TypeError("undefined can not be serialized as JSON");
}
if(_e3=="function"){
return null;
}
res=[];
for(var k in o){
var _ec;
if(typeof (k)=="number"){
_ec="\""+k+"\"";
}else{
if(typeof (k)=="string"){
_ec=_e5(k);
}else{
continue;
}
}
val=me(o[k]);
if(typeof (val)!="string"){
continue;
}
res.push(_ec+":"+val);
}
return "{"+res.join(", ")+"}";
},objEqual:function(a,b){
return (MochiKit.Base.compare(a,b)===0);
},arrayEqual:function(_ef,arr){
if(_ef.length!=arr.length){
return false;
}
return (MochiKit.Base.compare(_ef,arr)===0);
},concat:function(){
var _f1=[];
var _f2=MochiKit.Base.extend;
for(var i=0;i<arguments.length;i++){
_f2(_f1,arguments[i]);
}
return _f1;
},keyComparator:function(key){
var m=MochiKit.Base;
var _f6=m.compare;
if(arguments.length==1){
return function(a,b){
return _f6(a[key],b[key]);
};
}
var _f9=m.extend(null,arguments);
return function(a,b){
var _fc=0;
for(var i=0;(_fc===0)&&(i<_f9.length);i++){
var key=_f9[i];
_fc=_f6(a[key],b[key]);
}
return _fc;
};
},reverseKeyComparator:function(key){
var _100=MochiKit.Base.keyComparator.apply(this,arguments);
return function(a,b){
return _100(b,a);
};
},partial:function(func){
var m=MochiKit.Base;
return m.bind.apply(this,m.extend([func,undefined],arguments,1));
},listMinMax:function(_105,lst){
if(lst.length===0){
return null;
}
var cur=lst[0];
var _108=MochiKit.Base.compare;
for(var i=1;i<lst.length;i++){
var o=lst[i];
if(_108(o,cur)==_105){
cur=o;
}
}
return cur;
},objMax:function(){
return MochiKit.Base.listMinMax(1,arguments);
},objMin:function(){
return MochiKit.Base.listMinMax(-1,arguments);
},findIdentical:function(lst,_10c,_10d,end){
if(typeof (end)=="undefined"||end===null){
end=lst.length;
}
if(typeof (_10d)=="undefined"||_10d===null){
_10d=0;
}
for(var i=_10d;i<end;i++){
if(lst[i]===_10c){
return i;
}
}
return -1;
},mean:function(){
var sum=0;
var m=MochiKit.Base;
var args=m.extend(null,arguments);
var _113=args.length;
while(args.length){
var o=args.shift();
if(o&&typeof (o)=="object"&&typeof (o.length)=="number"){
_113+=o.length-1;
for(var i=o.length-1;i>=0;i--){
sum+=o[i];
}
}else{
sum+=o;
}
}
if(_113<=0){
throw new TypeError("mean() requires at least one argument");
}
return sum/_113;
},median:function(){
var data=MochiKit.Base.flattenArguments(arguments);
if(data.length===0){
throw new TypeError("median() requires at least one argument");
}
data.sort(compare);
if(data.length%2==0){
var _117=data.length/2;
return (data[_117]+data[_117-1])/2;
}else{
return data[(data.length-1)/2];
}
},findValue:function(lst,_119,_11a,end){
if(typeof (end)=="undefined"||end===null){
end=lst.length;
}
if(typeof (_11a)=="undefined"||_11a===null){
_11a=0;
}
var cmp=MochiKit.Base.compare;
for(var i=_11a;i<end;i++){
if(cmp(lst[i],_119)===0){
return i;
}
}
return -1;
},nodeWalk:function(node,_11f){
var _120=[node];
var _121=MochiKit.Base.extend;
while(_120.length){
var res=_11f(_120.shift());
if(res){
_121(_120,res);
}
}
},nameFunctions:function(_123){
var base=_123.NAME;
if(typeof (base)=="undefined"){
base="";
}else{
base=base+".";
}
for(var name in _123){
var o=_123[name];
if(typeof (o)=="function"&&typeof (o.NAME)=="undefined"){
try{
o.NAME=base+name;
}
catch(e){
}
}
}
},queryString:function(_127,_128){
if(typeof (MochiKit.DOM)!="undefined"&&arguments.length==1&&(typeof (_127)=="string"||(typeof (_127.nodeType)!="undefined"&&_127.nodeType>0))){
var kv=MochiKit.DOM.formContents(_127);
_127=kv[0];
_128=kv[1];
}else{
if(arguments.length==1){
if(typeof (_127.length)=="number"&&_127.length==2){
return arguments.callee(_127[0],_127[1]);
}
var o=_127;
_127=[];
_128=[];
for(var k in o){
var v=o[k];
if(typeof (v)=="function"){
continue;
}else{
if(typeof (v)!="string"&&typeof (v.length)=="number"){
for(var i=0;i<v.length;i++){
_127.push(k);
_128.push(v[i]);
}
}else{
_127.push(k);
_128.push(v);
}
}
}
}
}
var rval=[];
var len=Math.min(_127.length,_128.length);
var _130=MochiKit.Base.urlEncode;
for(var i=0;i<len;i++){
v=_128[i];
if(typeof (v)!="undefined"&&v!==null){
rval.push(_130(_127[i])+"="+_130(v));
}
}
return rval.join("&");
},parseQueryString:function(_131,_132){
var qstr=(_131.charAt(0)=="?")?_131.substring(1):_131;
var _134=qstr.replace(/\+/g,"%20").split(/(\&amp\;|\&\#38\;|\&#x26;|\&)/);
var o={};
var _136;
if(typeof (decodeURIComponent)!="undefined"){
_136=decodeURIComponent;
}else{
_136=unescape;
}
if(_132){
for(var i=0;i<_134.length;i++){
var pair=_134[i].split("=");
var name=_136(pair.shift());
if(!name){
continue;
}
var arr=o[name];
if(!(arr instanceof Array)){
arr=[];
o[name]=arr;
}
arr.push(_136(pair.join("=")));
}
}else{
for(i=0;i<_134.length;i++){
pair=_134[i].split("=");
var name=pair.shift();
if(!name){
continue;
}
o[_136(name)]=_136(pair.join("="));
}
}
return o;
}});
MochiKit.Base.AdapterRegistry=function(){
this.pairs=[];
};
MochiKit.Base.AdapterRegistry.prototype={register:function(name,_13c,wrap,_13e){
if(_13e){
this.pairs.unshift([name,_13c,wrap]);
}else{
this.pairs.push([name,_13c,wrap]);
}
},match:function(){
for(var i=0;i<this.pairs.length;i++){
var pair=this.pairs[i];
if(pair[1].apply(this,arguments)){
return pair[2].apply(this,arguments);
}
}
throw MochiKit.Base.NotFound;
},unregister:function(name){
for(var i=0;i<this.pairs.length;i++){
var pair=this.pairs[i];
if(pair[0]==name){
this.pairs.splice(i,1);
return true;
}
}
return false;
}};
MochiKit.Base.EXPORT=["flattenArray","noop","camelize","counter","clone","extend","update","updatetree","setdefault","keys","values","items","NamedError","operator","forwardCall","itemgetter","typeMatcher","isCallable","isUndefined","isUndefinedOrNull","isNull","isEmpty","isNotEmpty","isArrayLike","isDateLike","xmap","map","xfilter","filter","methodcaller","compose","bind","bindMethods","NotFound","AdapterRegistry","registerComparator","compare","registerRepr","repr","objEqual","arrayEqual","concat","keyComparator","reverseKeyComparator","partial","merge","listMinMax","listMax","listMin","objMax","objMin","nodeWalk","zip","urlEncode","queryString","serializeJSON","registerJSON","evalJSON","parseQueryString","findValue","findIdentical","flattenArguments","method","average","mean","median"];
MochiKit.Base.EXPORT_OK=["nameFunctions","comparatorRegistry","reprRegistry","jsonRegistry","compareDateLike","compareArrayLike","reprArrayLike","reprString","reprNumber"];
MochiKit.Base._exportSymbols=function(_144,_145){
if(!MochiKit.__export__){
return;
}
var all=_145.EXPORT_TAGS[":all"];
for(var i=0;i<all.length;i++){
_144[all[i]]=_145[all[i]];
}
};
MochiKit.Base.__new__=function(){
var m=this;
m.noop=m.operator.identity;
m.forward=m.forwardCall;
m.find=m.findValue;
if(typeof (encodeURIComponent)!="undefined"){
m.urlEncode=function(_149){
return encodeURIComponent(_149).replace(/\'/g,"%27");
};
}else{
m.urlEncode=function(_14a){
return escape(_14a).replace(/\+/g,"%2B").replace(/\"/g,"%22").rval.replace(/\'/g,"%27");
};
}
m.NamedError=function(name){
this.message=name;
this.name=name;
};
m.NamedError.prototype=new Error();
m.update(m.NamedError.prototype,{repr:function(){
if(this.message&&this.message!=this.name){
return this.name+"("+m.repr(this.message)+")";
}else{
return this.name+"()";
}
},toString:m.forwardCall("repr")});
m.NotFound=new m.NamedError("MochiKit.Base.NotFound");
m.listMax=m.partial(m.listMinMax,1);
m.listMin=m.partial(m.listMinMax,-1);
m.isCallable=m.typeMatcher("function");
m.isUndefined=m.typeMatcher("undefined");
m.merge=m.partial(m.update,null);
m.zip=m.partial(m.map,null);
m.average=m.mean;
m.comparatorRegistry=new m.AdapterRegistry();
m.registerComparator("dateLike",m.isDateLike,m.compareDateLike);
m.registerComparator("arrayLike",m.isArrayLike,m.compareArrayLike);
m.reprRegistry=new m.AdapterRegistry();
m.registerRepr("arrayLike",m.isArrayLike,m.reprArrayLike);
m.registerRepr("string",m.typeMatcher("string"),m.reprString);
m.registerRepr("numbers",m.typeMatcher("number","boolean"),m.reprNumber);
m.jsonRegistry=new m.AdapterRegistry();
var all=m.concat(m.EXPORT,m.EXPORT_OK);
m.EXPORT_TAGS={":common":m.concat(m.EXPORT_OK),":all":all};
m.nameFunctions(this);
};
MochiKit.Base.__new__();
if(MochiKit.__export__){
compare=MochiKit.Base.compare;
compose=MochiKit.Base.compose;
serializeJSON=MochiKit.Base.serializeJSON;
}
MochiKit.Base._exportSymbols(this,MochiKit.Base);
if(typeof (dojo)!="undefined"){
dojo.provide("MochiKit.Iter");
dojo.require("MochiKit.Base");
}
if(typeof (JSAN)!="undefined"){
JSAN.use("MochiKit.Base",[]);
}
try{
if(typeof (MochiKit.Base)=="undefined"){
throw "";
}
}
catch(e){
throw "MochiKit.Iter depends on MochiKit.Base!";
}
if(typeof (MochiKit.Iter)=="undefined"){
MochiKit.Iter={};
}
MochiKit.Iter.NAME="MochiKit.Iter";
MochiKit.Iter.VERSION="1.4";
MochiKit.Base.update(MochiKit.Iter,{__repr__:function(){
return "["+this.NAME+" "+this.VERSION+"]";
},toString:function(){
return this.__repr__();
},registerIteratorFactory:function(name,_14e,_14f,_150){
MochiKit.Iter.iteratorRegistry.register(name,_14e,_14f,_150);
},iter:function(_151,_152){
var self=MochiKit.Iter;
if(arguments.length==2){
return self.takewhile(function(a){
return a!=_152;
},_151);
}
if(typeof (_151.next)=="function"){
return _151;
}else{
if(typeof (_151.iter)=="function"){
return _151.iter();
}
}
try{
return self.iteratorRegistry.match(_151);
}
catch(e){
var m=MochiKit.Base;
if(e==m.NotFound){
e=new TypeError(typeof (_151)+": "+m.repr(_151)+" is not iterable");
}
throw e;
}
},count:function(n){
if(!n){
n=0;
}
var m=MochiKit.Base;
return {repr:function(){
return "count("+n+")";
},toString:m.forwardCall("repr"),next:m.counter(n)};
},cycle:function(p){
var self=MochiKit.Iter;
var m=MochiKit.Base;
var lst=[];
var _15c=self.iter(p);
return {repr:function(){
return "cycle(...)";
},toString:m.forwardCall("repr"),next:function(){
try{
var rval=_15c.next();
lst.push(rval);
return rval;
}
catch(e){
if(e!=self.StopIteration){
throw e;
}
if(lst.length===0){
this.next=function(){
throw self.StopIteration;
};
}else{
var i=-1;
this.next=function(){
i=(i+1)%lst.length;
return lst[i];
};
}
return this.next();
}
}};
},repeat:function(elem,n){
var m=MochiKit.Base;
if(typeof (n)=="undefined"){
return {repr:function(){
return "repeat("+m.repr(elem)+")";
},toString:m.forwardCall("repr"),next:function(){
return elem;
}};
}
return {repr:function(){
return "repeat("+m.repr(elem)+", "+n+")";
},toString:m.forwardCall("repr"),next:function(){
if(n<=0){
throw MochiKit.Iter.StopIteration;
}
n-=1;
return elem;
}};
},next:function(_162){
return _162.next();
},izip:function(p,q){
var m=MochiKit.Base;
var self=MochiKit.Iter;
var next=self.next;
var _168=m.map(self.iter,arguments);
return {repr:function(){
return "izip(...)";
},toString:m.forwardCall("repr"),next:function(){
return m.map(next,_168);
}};
},ifilter:function(pred,seq){
var m=MochiKit.Base;
seq=MochiKit.Iter.iter(seq);
if(pred===null){
pred=m.operator.truth;
}
return {repr:function(){
return "ifilter(...)";
},toString:m.forwardCall("repr"),next:function(){
while(true){
var rval=seq.next();
if(pred(rval)){
return rval;
}
}
return undefined;
}};
},ifilterfalse:function(pred,seq){
var m=MochiKit.Base;
seq=MochiKit.Iter.iter(seq);
if(pred===null){
pred=m.operator.truth;
}
return {repr:function(){
return "ifilterfalse(...)";
},toString:m.forwardCall("repr"),next:function(){
while(true){
var rval=seq.next();
if(!pred(rval)){
return rval;
}
}
return undefined;
}};
},islice:function(seq){
var self=MochiKit.Iter;
var m=MochiKit.Base;
seq=self.iter(seq);
var _174=0;
var stop=0;
var step=1;
var i=-1;
if(arguments.length==2){
stop=arguments[1];
}else{
if(arguments.length==3){
_174=arguments[1];
stop=arguments[2];
}else{
_174=arguments[1];
stop=arguments[2];
step=arguments[3];
}
}
return {repr:function(){
return "islice("+["...",_174,stop,step].join(", ")+")";
},toString:m.forwardCall("repr"),next:function(){
var rval;
while(i<_174){
rval=seq.next();
i++;
}
if(_174>=stop){
throw self.StopIteration;
}
_174+=step;
return rval;
}};
},imap:function(fun,p,q){
var m=MochiKit.Base;
var self=MochiKit.Iter;
var _17e=m.map(self.iter,m.extend(null,arguments,1));
var map=m.map;
var next=self.next;
return {repr:function(){
return "imap(...)";
},toString:m.forwardCall("repr"),next:function(){
return fun.apply(this,map(next,_17e));
}};
},applymap:function(fun,seq,self){
seq=MochiKit.Iter.iter(seq);
var m=MochiKit.Base;
return {repr:function(){
return "applymap(...)";
},toString:m.forwardCall("repr"),next:function(){
return fun.apply(self,seq.next());
}};
},chain:function(p,q){
var self=MochiKit.Iter;
var m=MochiKit.Base;
if(arguments.length==1){
return self.iter(arguments[0]);
}
var _189=m.map(self.iter,arguments);
return {repr:function(){
return "chain(...)";
},toString:m.forwardCall("repr"),next:function(){
while(_189.length>1){
try{
return _189[0].next();
}
catch(e){
if(e!=self.StopIteration){
throw e;
}
_189.shift();
}
}
if(_189.length==1){
var arg=_189.shift();
this.next=m.bind("next",arg);
return this.next();
}
throw self.StopIteration;
}};
},takewhile:function(pred,seq){
var self=MochiKit.Iter;
seq=self.iter(seq);
return {repr:function(){
return "takewhile(...)";
},toString:MochiKit.Base.forwardCall("repr"),next:function(){
var rval=seq.next();
if(!pred(rval)){
this.next=function(){
throw self.StopIteration;
};
this.next();
}
return rval;
}};
},dropwhile:function(pred,seq){
seq=MochiKit.Iter.iter(seq);
var m=MochiKit.Base;
var bind=m.bind;
return {"repr":function(){
return "dropwhile(...)";
},"toString":m.forwardCall("repr"),"next":function(){
while(true){
var rval=seq.next();
if(!pred(rval)){
break;
}
}
this.next=bind("next",seq);
return rval;
}};
},_tee:function(_194,sync,_196){
sync.pos[_194]=-1;
var m=MochiKit.Base;
var _198=m.listMin;
return {repr:function(){
return "tee("+_194+", ...)";
},toString:m.forwardCall("repr"),next:function(){
var rval;
var i=sync.pos[_194];
if(i==sync.max){
rval=_196.next();
sync.deque.push(rval);
sync.max+=1;
sync.pos[_194]+=1;
}else{
rval=sync.deque[i-sync.min];
sync.pos[_194]+=1;
if(i==sync.min&&_198(sync.pos)!=sync.min){
sync.min+=1;
sync.deque.shift();
}
}
return rval;
}};
},tee:function(_19b,n){
var rval=[];
var sync={"pos":[],"deque":[],"max":-1,"min":-1};
if(arguments.length==1||typeof (n)=="undefined"||n===null){
n=2;
}
var self=MochiKit.Iter;
_19b=self.iter(_19b);
var _tee=self._tee;
for(var i=0;i<n;i++){
rval.push(_tee(i,sync,_19b));
}
return rval;
},list:function(_1a2){
var rval;
if(_1a2 instanceof Array){
return _1a2.slice();
}
if(typeof (_1a2)=="function"&&!(_1a2 instanceof Function)&&typeof (_1a2.length)=="number"){
rval=[];
for(var i=0;i<_1a2.length;i++){
rval.push(_1a2[i]);
}
return rval;
}
var self=MochiKit.Iter;
_1a2=self.iter(_1a2);
var rval=[];
try{
while(true){
rval.push(_1a2.next());
}
}
catch(e){
if(e!=self.StopIteration){
throw e;
}
return rval;
}
return undefined;
},reduce:function(fn,_1a7,_1a8){
var i=0;
var x=_1a8;
var self=MochiKit.Iter;
_1a7=self.iter(_1a7);
if(arguments.length<3){
try{
x=_1a7.next();
}
catch(e){
if(e==self.StopIteration){
e=new TypeError("reduce() of empty sequence with no initial value");
}
throw e;
}
i++;
}
try{
while(true){
x=fn(x,_1a7.next());
}
}
catch(e){
if(e!=self.StopIteration){
throw e;
}
}
return x;
},range:function(){
var _1ac=0;
var stop=0;
var step=1;
if(arguments.length==1){
stop=arguments[0];
}else{
if(arguments.length==2){
_1ac=arguments[0];
stop=arguments[1];
}else{
if(arguments.length==3){
_1ac=arguments[0];
stop=arguments[1];
step=arguments[2];
}else{
throw new TypeError("range() takes 1, 2, or 3 arguments!");
}
}
}
if(step===0){
throw new TypeError("range() step must not be 0");
}
return {next:function(){
if((step>0&&_1ac>=stop)||(step<0&&_1ac<=stop)){
throw MochiKit.Iter.StopIteration;
}
var rval=_1ac;
_1ac+=step;
return rval;
},repr:function(){
return "range("+[_1ac,stop,step].join(", ")+")";
},toString:MochiKit.Base.forwardCall("repr")};
},sum:function(_1b0,_1b1){
if(typeof (_1b1)=="undefined"||_1b1===null){
_1b1=0;
}
var x=_1b1;
var self=MochiKit.Iter;
_1b0=self.iter(_1b0);
try{
while(true){
x+=_1b0.next();
}
}
catch(e){
if(e!=self.StopIteration){
throw e;
}
}
return x;
},exhaust:function(_1b4){
var self=MochiKit.Iter;
_1b4=self.iter(_1b4);
try{
while(true){
_1b4.next();
}
}
catch(e){
if(e!=self.StopIteration){
throw e;
}
}
},forEach:function(_1b6,func,self){
var m=MochiKit.Base;
if(arguments.length>2){
func=m.bind(func,self);
}
if(m.isArrayLike(_1b6)){
try{
for(var i=0;i<_1b6.length;i++){
func(_1b6[i]);
}
}
catch(e){
if(e!=MochiKit.Iter.StopIteration){
throw e;
}
}
}else{
self=MochiKit.Iter;
self.exhaust(self.imap(func,_1b6));
}
},every:function(_1bb,func){
var self=MochiKit.Iter;
try{
self.ifilterfalse(func,_1bb).next();
return false;
}
catch(e){
if(e!=self.StopIteration){
throw e;
}
return true;
}
},sorted:function(_1be,cmp){
var rval=MochiKit.Iter.list(_1be);
if(arguments.length==1){
cmp=MochiKit.Base.compare;
}
rval.sort(cmp);
return rval;
},reversed:function(_1c1){
var rval=MochiKit.Iter.list(_1c1);
rval.reverse();
return rval;
},some:function(_1c3,func){
var self=MochiKit.Iter;
try{
self.ifilter(func,_1c3).next();
return true;
}
catch(e){
if(e!=self.StopIteration){
throw e;
}
return false;
}
},iextend:function(lst,_1c7){
if(MochiKit.Base.isArrayLike(_1c7)){
for(var i=0;i<_1c7.length;i++){
lst.push(_1c7[i]);
}
}else{
var self=MochiKit.Iter;
_1c7=self.iter(_1c7);
try{
while(true){
lst.push(_1c7.next());
}
}
catch(e){
if(e!=self.StopIteration){
throw e;
}
}
}
return lst;
},groupby:function(_1ca,_1cb){
var m=MochiKit.Base;
var self=MochiKit.Iter;
if(arguments.length<2){
_1cb=m.operator.identity;
}
_1ca=self.iter(_1ca);
var pk=undefined;
var k=undefined;
var v;
function fetch(){
v=_1ca.next();
k=_1cb(v);
}
function eat(){
var ret=v;
v=undefined;
return ret;
}
var _1d2=true;
var _1d3=m.compare;
return {repr:function(){
return "groupby(...)";
},next:function(){
while(_1d3(k,pk)===0){
fetch();
if(_1d2){
_1d2=false;
break;
}
}
pk=k;
return [k,{next:function(){
if(v==undefined){
fetch();
}
if(_1d3(k,pk)!==0){
throw self.StopIteration;
}
return eat();
}}];
}};
},groupby_as_array:function(_1d4,_1d5){
var m=MochiKit.Base;
var self=MochiKit.Iter;
if(arguments.length<2){
_1d5=m.operator.identity;
}
_1d4=self.iter(_1d4);
var _1d8=[];
var _1d9=true;
var _1da;
var _1db=m.compare;
while(true){
try{
var _1dc=_1d4.next();
var key=_1d5(_1dc);
}
catch(e){
if(e==self.StopIteration){
break;
}
throw e;
}
if(_1d9||_1db(key,_1da)!==0){
var _1de=[];
_1d8.push([key,_1de]);
}
_1de.push(_1dc);
_1d9=false;
_1da=key;
}
return _1d8;
},arrayLikeIter:function(_1df){
var i=0;
return {repr:function(){
return "arrayLikeIter(...)";
},toString:MochiKit.Base.forwardCall("repr"),next:function(){
if(i>=_1df.length){
throw MochiKit.Iter.StopIteration;
}
return _1df[i++];
}};
},hasIterateNext:function(_1e1){
return (_1e1&&typeof (_1e1.iterateNext)=="function");
},iterateNextIter:function(_1e2){
return {repr:function(){
return "iterateNextIter(...)";
},toString:MochiKit.Base.forwardCall("repr"),next:function(){
var rval=_1e2.iterateNext();
if(rval===null||rval===undefined){
throw MochiKit.Iter.StopIteration;
}
return rval;
}};
}});
MochiKit.Iter.EXPORT_OK=["iteratorRegistry","arrayLikeIter","hasIterateNext","iterateNextIter",];
MochiKit.Iter.EXPORT=["StopIteration","registerIteratorFactory","iter","count","cycle","repeat","next","izip","ifilter","ifilterfalse","islice","imap","applymap","chain","takewhile","dropwhile","tee","list","reduce","range","sum","exhaust","forEach","every","sorted","reversed","some","iextend","groupby","groupby_as_array"];
MochiKit.Iter.__new__=function(){
var m=MochiKit.Base;
if(typeof (StopIteration)!="undefined"){
this.StopIteration=StopIteration;
}else{
this.StopIteration=new m.NamedError("StopIteration");
}
this.iteratorRegistry=new m.AdapterRegistry();
this.registerIteratorFactory("arrayLike",m.isArrayLike,this.arrayLikeIter);
this.registerIteratorFactory("iterateNext",this.hasIterateNext,this.iterateNextIter);
this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
m.nameFunctions(this);
};
MochiKit.Iter.__new__();
if(MochiKit.__export__){
reduce=MochiKit.Iter.reduce;
}
MochiKit.Base._exportSymbols(this,MochiKit.Iter);
if(typeof (dojo)!="undefined"){
dojo.provide("MochiKit.Format");
}
if(typeof (MochiKit)=="undefined"){
MochiKit={};
}
if(typeof (MochiKit.Format)=="undefined"){
MochiKit.Format={};
}
MochiKit.Format.NAME="MochiKit.Format";
MochiKit.Format.VERSION="1.4";
MochiKit.Format.__repr__=function(){
return "["+this.NAME+" "+this.VERSION+"]";
};
MochiKit.Format.toString=function(){
return this.__repr__();
};
MochiKit.Format._numberFormatter=function(_1e5,_1e6,_1e7,_1e8,_1e9,_1ea,_1eb,_1ec,_1ed){
return function(num){
num=parseFloat(num);
if(typeof (num)=="undefined"||num===null||isNaN(num)){
return _1e5;
}
var _1ef=_1e6;
var _1f0=_1e7;
if(num<0){
num=-num;
}else{
_1ef=_1ef.replace(/-/,"");
}
var me=arguments.callee;
var fmt=MochiKit.Format.formatLocale(_1e8);
if(_1e9){
num=num*100;
_1f0=fmt.percent+_1f0;
}
num=MochiKit.Format.roundToFixed(num,_1ea);
var _1f3=num.split(/\./);
var _1f4=_1f3[0];
var frac=(_1f3.length==1)?"":_1f3[1];
var res="";
while(_1f4.length<_1eb){
_1f4="0"+_1f4;
}
if(_1ec){
while(_1f4.length>_1ec){
var i=_1f4.length-_1ec;
res=fmt.separator+_1f4.substring(i,_1f4.length)+res;
_1f4=_1f4.substring(0,i);
}
}
res=_1f4+res;
if(_1ea>0){
while(frac.length<_1ed){
frac=frac+"0";
}
res=res+fmt.decimal+frac;
}
return _1ef+res+_1f0;
};
};
MochiKit.Format.numberFormatter=function(_1f8,_1f9,_1fa){
if(typeof (_1f9)=="undefined"){
_1f9="";
}
var _1fb=_1f8.match(/((?:[0#]+,)?[0#]+)(?:\.([0#]+))?(%)?/);
if(!_1fb){
throw TypeError("Invalid pattern");
}
var _1fc=_1f8.substr(0,_1fb.index);
var _1fd=_1f8.substr(_1fb.index+_1fb[0].length);
if(_1fc.search(/-/)==-1){
_1fc=_1fc+"-";
}
var _1fe=_1fb[1];
var frac=(typeof (_1fb[2])=="string"&&_1fb[2]!="")?_1fb[2]:"";
var _200=(typeof (_1fb[3])=="string"&&_1fb[3]!="");
var tmp=_1fe.split(/,/);
var _202;
if(typeof (_1fa)=="undefined"){
_1fa="default";
}
if(tmp.length==1){
_202=null;
}else{
_202=tmp[1].length;
}
var _203=_1fe.length-_1fe.replace(/0/g,"").length;
var _204=frac.length-frac.replace(/0/g,"").length;
var _205=frac.length;
var rval=MochiKit.Format._numberFormatter(_1f9,_1fc,_1fd,_1fa,_200,_205,_203,_202,_204);
var m=MochiKit.Base;
if(m){
var fn=arguments.callee;
var args=m.concat(arguments);
rval.repr=function(){
return [self.NAME,"(",map(m.repr,args).join(", "),")"].join("");
};
}
return rval;
};
MochiKit.Format.formatLocale=function(_20a){
if(typeof (_20a)=="undefined"||_20a===null){
_20a="default";
}
if(typeof (_20a)=="string"){
var rval=MochiKit.Format.LOCALE[_20a];
if(typeof (rval)=="string"){
rval=arguments.callee(rval);
MochiKit.Format.LOCALE[_20a]=rval;
}
return rval;
}else{
return _20a;
}
};
MochiKit.Format.twoDigitAverage=function(_20c,_20d){
if(_20d){
var res=_20c/_20d;
if(!isNaN(res)){
return MochiKit.Format.twoDigitFloat(_20c/_20d);
}
}
return "0";
};
MochiKit.Format.twoDigitFloat=function(_20f){
var sign=(_20f<0?"-":"");
var s=Math.floor(Math.abs(_20f)*100).toString();
if(s=="0"){
return s;
}
if(s.length<3){
while(s.charAt(s.length-1)=="0"){
s=s.substring(0,s.length-1);
}
return sign+"0."+s;
}
var head=sign+s.substring(0,s.length-2);
var tail=s.substring(s.length-2,s.length);
if(tail=="00"){
return head;
}else{
if(tail.charAt(1)=="0"){
return head+"."+tail.charAt(0);
}else{
return head+"."+tail;
}
}
};
MochiKit.Format.lstrip=function(str,_215){
str=str+"";
if(typeof (str)!="string"){
return null;
}
if(!_215){
return str.replace(/^\s+/,"");
}else{
return str.replace(new RegExp("^["+_215+"]+"),"");
}
};
MochiKit.Format.rstrip=function(str,_217){
str=str+"";
if(typeof (str)!="string"){
return null;
}
if(!_217){
return str.replace(/\s+$/,"");
}else{
return str.replace(new RegExp("["+_217+"]+$"),"");
}
};
MochiKit.Format.strip=function(str,_219){
var self=MochiKit.Format;
return self.rstrip(self.lstrip(str,_219),_219);
};
MochiKit.Format.truncToFixed=function(_21b,_21c){
_21b=Math.floor(_21b*Math.pow(10,_21c));
var res=(_21b*Math.pow(10,-_21c)).toFixed(_21c);
if(res.charAt(0)=="."){
res="0"+res;
}
return res;
};
MochiKit.Format.roundToFixed=function(_21e,_21f){
return MochiKit.Format.truncToFixed(_21e+0.5*Math.pow(10,-_21f),_21f);
};
MochiKit.Format.percentFormat=function(_220){
return MochiKit.Format.twoDigitFloat(100*_220)+"%";
};
MochiKit.Format.EXPORT=["truncToFixed","roundToFixed","numberFormatter","formatLocale","twoDigitAverage","twoDigitFloat","percentFormat","lstrip","rstrip","strip"];
MochiKit.Format.LOCALE={en_US:{separator:",",decimal:".",percent:"%"},de_DE:{separator:".",decimal:",",percent:"%"},fr_FR:{separator:" ",decimal:",",percent:"%"},"default":"en_US"};
MochiKit.Format.EXPORT_OK=[];
MochiKit.Format.EXPORT_TAGS={":all":MochiKit.Format.EXPORT,":common":MochiKit.Format.EXPORT};
MochiKit.Format.__new__=function(){
var base=this.NAME+".";
var k,v,o;
for(k in this.LOCALE){
o=this.LOCALE[k];
if(typeof (o)=="object"){
o.repr=function(){
return this.NAME;
};
o.NAME=base+"LOCALE."+k;
}
}
for(k in this){
o=this[k];
if(typeof (o)=="function"&&typeof (o.NAME)=="undefined"){
try{
o.NAME=base+k;
}
catch(e){
}
}
}
};
MochiKit.Format.__new__();
if(typeof (MochiKit.Base)!="undefined"){
MochiKit.Base._exportSymbols(this,MochiKit.Format);
}else{
(function(_225,_226){
if((typeof (JSAN)=="undefined"&&typeof (dojo)=="undefined")||(MochiKit.__export__===false)){
var all=_226.EXPORT_TAGS[":all"];
for(var i=0;i<all.length;i++){
_225[all[i]]=_226[all[i]];
}
}
})(this,MochiKit.Format);
}
if(typeof (dojo)!="undefined"){
dojo.provide("MochiKit.DOM");
dojo.require("MochiKit.Base");
}
if(typeof (JSAN)!="undefined"){
JSAN.use("MochiKit.Base",[]);
}
try{
if(typeof (MochiKit.Base)=="undefined"){
throw "";
}
}
catch(e){
throw "MochiKit.DOM depends on MochiKit.Base!";
}
if(typeof (MochiKit.DOM)=="undefined"){
MochiKit.DOM={};
}
MochiKit.DOM.NAME="MochiKit.DOM";
MochiKit.DOM.VERSION="1.4";
MochiKit.DOM.__repr__=function(){
return "["+this.NAME+" "+this.VERSION+"]";
};
MochiKit.DOM.toString=function(){
return this.__repr__();
};
MochiKit.DOM.EXPORT=["removeEmptyTextNodes","formContents","currentWindow","currentDocument","withWindow","withDocument","registerDOMConverter","coerceToDOM","createDOM","createDOMFunc","isChildNode","getNodeAttribute","removeNodeAttribute","setNodeAttribute","updateNodeAttributes","appendChildNodes","insertSiblingNodesAfter","insertSiblingNodesBefore","replaceChildNodes","removeElement","swapDOM","BUTTON","TT","PRE","H1","H2","H3","BR","CANVAS","HR","LABEL","TEXTAREA","FORM","STRONG","SELECT","OPTION","OPTGROUP","LEGEND","FIELDSET","P","UL","OL","LI","TD","TR","THEAD","TBODY","TFOOT","TABLE","TH","INPUT","SPAN","A","DIV","IMG","getElement","$","getElementsByTagAndClassName","addToCallStack","addLoadEvent","focusOnLoad","setElementClass","toggleElementClass","addElementClass","removeElementClass","swapElementClass","hasElementClass","escapeHTML","toHTML","emitHTML","scrapeText","isParent","getFirstParentByTagAndClassName","makeClipping","undoClipping","makePositioned","undoPositioned","getFirstElementByTagAndClassName"];
MochiKit.DOM.EXPORT_OK=["domConverters"];
MochiKit.DOM.DEPRECATED=[["computedStyle","MochiKit.Style.getStyle","1.4"],["elementDimensions","MochiKit.Style.getElementDimensions","1.4"],["elementPosition","MochiKit.Style.getElementPosition","1.4"],["hideElement","MochiKit.Style.hideElement","1.4"],["setElementDimensions","MochiKit.Style.setElementDimensions","1.4"],["setElementPosition","MochiKit.Style.setElementPosition","1.4"],["setDisplayForElement","MochiKit.Style.setDisplayForElement","1.4"],["setOpacity","MochiKit.Style.setOpacity","1.4"],["showElement","MochiKit.Style.showElement","1.4"],["Coordinates","MochiKit.Style.Coordinates","1.4"],["Dimensions","MochiKit.Style.Dimensions","1.4"]];
MochiKit.DOM.getViewportDimensions=new Function(""+"if (!MochiKit[\"Style\"]) {"+"    throw new Error(\"This function has been deprecated and depends on MochiKit.Style.\");"+"}"+"return MochiKit.Style.getViewportDimensions.apply(this, arguments);");
MochiKit.Base.update(MochiKit.DOM,{currentWindow:function(){
return MochiKit.DOM._window;
},currentDocument:function(){
return MochiKit.DOM._document;
},withWindow:function(win,func){
var self=MochiKit.DOM;
var _22c=self._document;
var _22d=self._window;
var rval;
try{
self._window=win;
self._document=win.document;
rval=func();
}
catch(e){
self._window=_22d;
self._document=_22c;
throw e;
}
self._window=_22d;
self._document=_22c;
return rval;
},formContents:function(elem){
var _230=[];
var _231=[];
var m=MochiKit.Base;
var self=MochiKit.DOM;
if(typeof (elem)=="undefined"||elem===null){
elem=self._document.body;
}else{
elem=self.getElement(elem);
}
m.nodeWalk(elem,function(elem){
var name=elem.name;
if(m.isNotEmpty(name)){
var _236=elem.tagName.toUpperCase();
if(_236==="INPUT"&&(elem.type=="radio"||elem.type=="checkbox")&&!elem.checked){
return null;
}
if(_236==="SELECT"){
if(elem.type=="select-one"){
if(elem.selectedIndex>=0){
var opt=elem.options[elem.selectedIndex];
var v=opt.value;
if(!v){
var h=opt.outerHTML;
if(h&&!h.match(/^[^>]+\svalue\s*=/i)){
v=opt.text;
}
}
_230.push(name);
_231.push(v);
return null;
}
_230.push(name);
_231.push("");
return null;
}else{
var opts=elem.options;
if(!opts.length){
_230.push(name);
_231.push("");
return null;
}
for(var i=0;i<opts.length;i++){
var opt=opts[i];
if(!opt.selected){
continue;
}
var v=opt.value;
if(!v){
var h=opt.outerHTML;
if(h&&!h.match(/^[^>]+\svalue\s*=/i)){
v=opt.text;
}
}
_230.push(name);
_231.push(v);
}
return null;
}
}
if(_236==="FORM"||_236==="P"||_236==="SPAN"||_236==="DIV"){
return elem.childNodes;
}
_230.push(name);
_231.push(elem.value||"");
return null;
}
return elem.childNodes;
});
return [_230,_231];
},withDocument:function(doc,func){
var self=MochiKit.DOM;
var _23f=self._document;
var rval;
try{
self._document=doc;
rval=func();
}
catch(e){
self._document=_23f;
throw e;
}
self._document=_23f;
return rval;
},registerDOMConverter:function(name,_242,wrap,_244){
MochiKit.DOM.domConverters.register(name,_242,wrap,_244);
},coerceToDOM:function(node,ctx){
var m=MochiKit.Base;
var im=MochiKit.Iter;
var self=MochiKit.DOM;
if(im){
var iter=im.iter;
var _24b=im.repeat;
var map=m.map;
}
var _24d=self.domConverters;
var _24e=arguments.callee;
var _24f=m.NotFound;
while(true){
if(typeof (node)=="undefined"||node===null){
return null;
}
if(typeof (node)=="function"&&typeof (node.length)=="number"&&!(node instanceof Function)){
node=im.list(node);
}
if(typeof (node.nodeType)!="undefined"&&node.nodeType>0){
return node;
}
if(typeof (node)=="number"||typeof (node)=="boolean"){
node=node.toString();
}
if(typeof (node)=="string"){
return self._document.createTextNode(node);
}
if(typeof (node.__dom__)=="function"){
node=node.__dom__(ctx);
continue;
}
if(typeof (node.dom)=="function"){
node=node.dom(ctx);
continue;
}
if(typeof (node)=="function"){
node=node.apply(ctx,[ctx]);
continue;
}
if(im){
var _250=null;
try{
_250=iter(node);
}
catch(e){
}
if(_250){
return map(_24e,_250,_24b(ctx));
}
}
try{
node=_24d.match(node,ctx);
continue;
}
catch(e){
if(e!=_24f){
throw e;
}
}
return self._document.createTextNode(node.toString());
}
return undefined;
},isChildNode:function(node,_252){
var self=MochiKit.DOM;
if(typeof (node)=="string"){
node=self.getElement(node);
}
if(typeof (_252)=="string"){
_252=self.getElement(_252);
}
if(node===_252){
return true;
}
while(node&&node.tagName.toUpperCase()!="BODY"){
node=node.parentNode;
if(node===_252){
return true;
}
}
return false;
},setNodeAttribute:function(node,attr,_256){
var o={};
o[attr]=_256;
try{
return MochiKit.DOM.updateNodeAttributes(node,o);
}
catch(e){
}
return null;
},getNodeAttribute:function(node,attr){
var self=MochiKit.DOM;
var _25b=self.attributeArray.renames[attr];
node=self.getElement(node);
try{
if(_25b){
return node[_25b];
}
return node.getAttribute(attr);
}
catch(e){
}
return null;
},removeNodeAttribute:function(node,attr){
var self=MochiKit.DOM;
var _25f=self.attributeArray.renames[attr];
node=self.getElement(node);
try{
if(_25f){
return node[_25f];
}
return node.removeAttribute(attr);
}
catch(e){
}
return null;
},updateNodeAttributes:function(node,_261){
var elem=node;
var self=MochiKit.DOM;
if(typeof (node)=="string"){
elem=self.getElement(node);
}
if(_261){
var _264=MochiKit.Base.updatetree;
if(self.attributeArray.compliant){
for(var k in _261){
var v=_261[k];
if(typeof (v)=="object"&&typeof (elem[k])=="object"){
if(k=="style"&&MochiKit.Style){
MochiKit.Style.setStyle(elem,v);
}else{
_264(elem[k],v);
}
}else{
if(k.substring(0,2)=="on"){
if(typeof (v)=="string"){
v=new Function(v);
}
elem[k]=v;
}else{
elem.setAttribute(k,v);
}
}
}
}else{
var _267=self.attributeArray.renames;
for(var k in _261){
v=_261[k];
var _268=_267[k];
if(k=="style"&&typeof (v)=="string"){
elem.style.cssText=v;
}else{
if(typeof (_268)=="string"){
elem[_268]=v;
}else{
if(typeof (elem[k])=="object"&&typeof (v)=="object"){
if(k=="style"&&MochiKit.Style){
MochiKit.Style.setStyle(elem,v);
}else{
_264(elem[k],v);
}
}else{
if(k.substring(0,2)=="on"){
if(typeof (v)=="string"){
v=new Function(v);
}
elem[k]=v;
}else{
elem.setAttribute(k,v);
}
}
}
}
}
}
}
return elem;
},appendChildNodes:function(node){
var elem=node;
var self=MochiKit.DOM;
if(typeof (node)=="string"){
elem=self.getElement(node);
}
var _26c=[self.coerceToDOM(MochiKit.Base.extend(null,arguments,1),elem)];
var _26d=MochiKit.Base.concat;
while(_26c.length){
var n=_26c.shift();
if(typeof (n)=="undefined"||n===null){
}else{
if(typeof (n.nodeType)=="number"){
elem.appendChild(n);
}else{
_26c=_26d(n,_26c);
}
}
}
return elem;
},insertSiblingNodesBefore:function(node){
var elem=node;
var self=MochiKit.DOM;
if(typeof (node)=="string"){
elem=self.getElement(node);
}
var _272=[self.coerceToDOM(MochiKit.Base.extend(null,arguments,1),elem)];
var _273=elem.parentNode;
var _274=MochiKit.Base.concat;
while(_272.length){
var n=_272.shift();
if(typeof (n)=="undefined"||n===null){
}else{
if(typeof (n.nodeType)=="number"){
_273.insertBefore(n,elem);
}else{
_272=_274(n,_272);
}
}
}
return _273;
},insertSiblingNodesAfter:function(node){
var elem=node;
var self=MochiKit.DOM;
if(typeof (node)=="string"){
elem=self.getElement(node);
}
var _279=[self.coerceToDOM(MochiKit.Base.extend(null,arguments,1),elem)];
if(elem.nextSibling){
return self.insertSiblingNodesBefore(elem.nextSibling,_279);
}else{
return self.appendChildNodes(elem.parentNode,_279);
}
},replaceChildNodes:function(node){
var elem=node;
var self=MochiKit.DOM;
if(typeof (node)=="string"){
elem=self.getElement(node);
arguments[0]=elem;
}
var _27d;
while((_27d=elem.firstChild)){
elem.removeChild(_27d);
}
if(arguments.length<2){
return elem;
}else{
return self.appendChildNodes.apply(this,arguments);
}
},createDOM:function(name,_27f){
var elem;
var self=MochiKit.DOM;
var m=MochiKit.Base;
if(typeof (_27f)=="string"||typeof (_27f)=="number"){
var args=m.extend([name,null],arguments,1);
return arguments.callee.apply(this,args);
}
if(typeof (name)=="string"){
var _284=self._xhtml;
if(_27f&&!self.attributeArray.compliant){
var _285="";
if("name" in _27f){
_285+=" name=\""+self.escapeHTML(_27f.name)+"\"";
}
if(name=="input"&&"type" in _27f){
_285+=" type=\""+self.escapeHTML(_27f.type)+"\"";
}
if(_285){
name="<"+name+_285+">";
_284=false;
}
}
var d=self._document;
if(_284&&d===document){
elem=d.createElementNS("http://www.w3.org/1999/xhtml",name);
}else{
elem=d.createElement(name);
}
}else{
elem=name;
}
if(_27f){
self.updateNodeAttributes(elem,_27f);
}
if(arguments.length<=2){
return elem;
}else{
var args=m.extend([elem],arguments,2);
return self.appendChildNodes.apply(this,args);
}
},createDOMFunc:function(){
var m=MochiKit.Base;
return m.partial.apply(this,m.extend([MochiKit.DOM.createDOM],arguments));
},removeElement:function(elem){
var e=MochiKit.DOM.getElement(elem);
e.parentNode.removeChild(e);
return e;
},swapDOM:function(dest,src){
var self=MochiKit.DOM;
dest=self.getElement(dest);
var _28d=dest.parentNode;
if(src){
src=self.getElement(src);
_28d.replaceChild(src,dest);
}else{
_28d.removeChild(dest);
}
return src;
},getElement:function(id){
var self=MochiKit.DOM;
if(arguments.length==1){
return ((typeof (id)=="string")?self._document.getElementById(id):id);
}else{
return MochiKit.Base.map(self.getElement,arguments);
}
},getElementsByTagAndClassName:function(_290,_291,_292){
var self=MochiKit.DOM;
if(typeof (_290)=="undefined"||_290===null){
_290="*";
}
if(typeof (_292)=="undefined"||_292===null){
_292=self._document;
}
_292=self.getElement(_292);
var _294=(_292.getElementsByTagName(_290)||self._document.all);
if(typeof (_291)=="undefined"||_291===null){
return MochiKit.Base.extend(null,_294);
}
var _295=[];
for(var i=0;i<_294.length;i++){
var _297=_294[i];
var cls=_297.className;
if(!cls){
continue;
}
var _299=cls.split(" ");
for(var j=0;j<_299.length;j++){
if(_299[j]==_291){
_295.push(_297);
break;
}
}
}
return _295;
},_newCallStack:function(path,once){
var rval=function(){
var _29e=arguments.callee.callStack;
for(var i=0;i<_29e.length;i++){
if(_29e[i].apply(this,arguments)===false){
break;
}
}
if(once){
try{
this[path]=null;
}
catch(e){
}
}
};
rval.callStack=[];
return rval;
},addToCallStack:function(_2a0,path,func,once){
var self=MochiKit.DOM;
var _2a5=_2a0[path];
var _2a6=_2a5;
if(!(typeof (_2a5)=="function"&&typeof (_2a5.callStack)=="object"&&_2a5.callStack!==null)){
_2a6=self._newCallStack(path,once);
if(typeof (_2a5)=="function"){
_2a6.callStack.push(_2a5);
}
_2a0[path]=_2a6;
}
_2a6.callStack.push(func);
},addLoadEvent:function(func){
var self=MochiKit.DOM;
self.addToCallStack(self._window,"onload",func,true);
},focusOnLoad:function(_2a9){
var self=MochiKit.DOM;
self.addLoadEvent(function(){
_2a9=self.getElement(_2a9);
if(_2a9){
_2a9.focus();
}
});
},setElementClass:function(_2ab,_2ac){
var self=MochiKit.DOM;
var obj=self.getElement(_2ab);
if(self.attributeArray.compliant){
obj.setAttribute("class",_2ac);
}else{
obj.setAttribute("className",_2ac);
}
},toggleElementClass:function(_2af){
var self=MochiKit.DOM;
for(var i=1;i<arguments.length;i++){
var obj=self.getElement(arguments[i]);
if(!self.addElementClass(obj,_2af)){
self.removeElementClass(obj,_2af);
}
}
},addElementClass:function(_2b3,_2b4){
var self=MochiKit.DOM;
var obj=self.getElement(_2b3);
var cls=obj.className;
if(cls==undefined||cls.length===0){
self.setElementClass(obj,_2b4);
return true;
}
if(cls==_2b4){
return false;
}
var _2b8=cls.split(" ");
for(var i=0;i<_2b8.length;i++){
if(_2b8[i]==_2b4){
return false;
}
}
self.setElementClass(obj,cls+" "+_2b4);
return true;
},removeElementClass:function(_2ba,_2bb){
var self=MochiKit.DOM;
var obj=self.getElement(_2ba);
var cls=obj.className;
if(cls==undefined||cls.length===0){
return false;
}
if(cls==_2bb){
self.setElementClass(obj,"");
return true;
}
var _2bf=cls.split(" ");
for(var i=0;i<_2bf.length;i++){
if(_2bf[i]==_2bb){
_2bf.splice(i,1);
self.setElementClass(obj,_2bf.join(" "));
return true;
}
}
return false;
},swapElementClass:function(_2c1,_2c2,_2c3){
var obj=MochiKit.DOM.getElement(_2c1);
var res=MochiKit.DOM.removeElementClass(obj,_2c2);
if(res){
MochiKit.DOM.addElementClass(obj,_2c3);
}
return res;
},hasElementClass:function(_2c6,_2c7){
var obj=MochiKit.DOM.getElement(_2c6);
var cls=obj.className;
if(!cls){
return false;
}
var _2ca=cls.split(" ");
for(var i=1;i<arguments.length;i++){
var good=false;
for(var j=0;j<_2ca.length;j++){
if(_2ca[j]==arguments[i]){
good=true;
break;
}
}
if(!good){
return false;
}
}
return true;
},escapeHTML:function(s){
return s.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/</g,"&lt;").replace(/>/g,"&gt;");
},toHTML:function(dom){
return MochiKit.DOM.emitHTML(dom).join("");
},emitHTML:function(dom,lst){
if(typeof (lst)=="undefined"||lst===null){
lst=[];
}
var _2d2=[dom];
var self=MochiKit.DOM;
var _2d4=self.escapeHTML;
var _2d5=self.attributeArray;
while(_2d2.length){
dom=_2d2.pop();
if(typeof (dom)=="string"){
lst.push(dom);
}else{
if(dom.nodeType==1){
lst.push("<"+dom.tagName.toLowerCase());
var _2d6=[];
var _2d7=_2d5(dom);
for(var i=0;i<_2d7.length;i++){
var a=_2d7[i];
_2d6.push([" ",a.name,"=\"",_2d4(a.value),"\""]);
}
_2d6.sort();
for(i=0;i<_2d6.length;i++){
var _2da=_2d6[i];
for(var j=0;j<_2da.length;j++){
lst.push(_2da[j]);
}
}
if(dom.hasChildNodes()){
lst.push(">");
_2d2.push("</"+dom.tagName.toLowerCase()+">");
var _2dc=dom.childNodes;
for(i=_2dc.length-1;i>=0;i--){
_2d2.push(_2dc[i]);
}
}else{
lst.push("/>");
}
}else{
if(dom.nodeType==3){
lst.push(_2d4(dom.nodeValue));
}
}
}
}
return lst;
},scrapeText:function(node,_2de){
var rval=[];
(function(node){
var cn=node.childNodes;
if(cn){
for(var i=0;i<cn.length;i++){
arguments.callee.call(this,cn[i]);
}
}
var _2e3=node.nodeValue;
if(typeof (_2e3)=="string"){
rval.push(_2e3);
}
})(MochiKit.DOM.getElement(node));
if(_2de){
return rval;
}else{
return rval.join("");
}
},removeEmptyTextNodes:function(_2e4){
_2e4=MochiKit.DOM.getElement(_2e4);
for(var i=0;i<_2e4.childNodes.length;i++){
var node=_2e4.childNodes[i];
if(node.nodeType==3&&!/\S/.test(node.nodeValue)){
node.parentNode.removeChild(node);
}
}
},makeClipping:function(_2e7){
_2e7=MochiKit.DOM.getElement(_2e7);
var _2e8=_2e7.style.overflow;
if((MochiKit.Style.getStyle(_2e7,"overflow")||"visible")!="hidden"){
_2e7.style.overflow="hidden";
}
return _2e8;
},undoClipping:function(_2e9,_2ea){
_2e9=MochiKit.DOM.getElement(_2e9);
if(!_2ea){
return;
}
_2e9.style.overflow=_2ea;
},makePositioned:function(_2eb){
_2eb=MochiKit.DOM.getElement(_2eb);
var pos=MochiKit.Style.getStyle(_2eb,"position");
if(pos=="static"||!pos){
_2eb.style.position="relative";
if(/Opera/.test(navigator.userAgent)){
_2eb.style.top=0;
_2eb.style.left=0;
}
}
},undoPositioned:function(_2ed){
_2ed=MochiKit.DOM.getElement(_2ed);
if(_2ed.style.position=="relative"){
_2ed.style.position=_2ed.style.top=_2ed.style.left=_2ed.style.bottom=_2ed.style.right="";
}
},getFirstElementByTagAndClassName:function(_2ee,_2ef,_2f0){
var self=MochiKit.DOM;
if(typeof (_2ee)=="undefined"||_2ee===null){
_2ee="*";
}
if(typeof (_2f0)=="undefined"||_2f0===null){
_2f0=self._document;
}
_2f0=self.getElement(_2f0);
var _2f2=(_2f0.getElementsByTagName(_2ee)||self._document.all);
if(typeof (_2ef)=="undefined"||_2ef===null){
return _2f2[0];
}
for(var i=0;i<_2f2.length;i++){
var _2f4=_2f2[i];
var _2f5=_2f4.className.split(" ");
for(var j=0;j<_2f5.length;j++){
if(_2f5[j]==_2ef){
return _2f4;
}
}
}
},getFirstParentByTagAndClassName:function(elem,_2f8,_2f9){
var self=MochiKit.DOM;
elem=self.getElement(elem);
if(typeof (_2f8)=="undefined"||_2f8===null){
_2f8="*";
}else{
_2f8=_2f8.toUpperCase();
}
if(typeof (_2f9)=="undefined"||_2f9===null){
_2f9=null;
}
var _2fb="";
var _2fc="";
while(elem&&elem.tagName){
elem=elem.parentNode;
if(_2f8=="*"&&_2f9===null){
return elem;
}
_2fb=elem.className.split(" ");
_2fc=elem.tagName.toUpperCase();
if(_2f9===null&&_2f8==_2fc){
return elem;
}else{
if(_2f9!==null){
for(var i=0;i<_2fb.length;i++){
if(_2f8=="*"&&_2fb[i]==_2f9){
return elem;
}else{
if(_2f8==_2fc&&_2fb[i]==_2f9){
return elem;
}
}
}
}
}
}
return elem;
},isParent:function(_2fe,_2ff){
if(!_2fe.parentNode||_2fe==_2ff){
return false;
}
if(_2fe.parentNode==_2ff){
return true;
}
return MochiKit.DOM.isParent(_2fe.parentNode,_2ff);
},__new__:function(win){
var m=MochiKit.Base;
if(typeof (document)!="undefined"){
this._document=document;
var _302="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
this._xhtml=(document.documentElement&&document.createElementNS&&document.documentElement.namespaceURI===_302);
}else{
if(MochiKit.MockDOM){
this._document=MochiKit.MockDOM.document;
}
}
this._window=win;
this.domConverters=new m.AdapterRegistry();
var _303=this._document.createElement("span");
var _304;
if(_303&&_303.attributes&&_303.attributes.length>0){
var _305=m.filter;
_304=function(node){
return _305(_304.ignoreAttrFilter,node.attributes);
};
_304.ignoreAttr={};
var _307=_303.attributes;
var _308=_304.ignoreAttr;
for(var i=0;i<_307.length;i++){
var a=_307[i];
_308[a.name]=a.value;
}
_304.ignoreAttrFilter=function(a){
return (_304.ignoreAttr[a.name]!=a.value);
};
_304.compliant=false;
_304.renames={"class":"className","checked":"defaultChecked","usemap":"useMap","for":"htmlFor","readonly":"readOnly","colspan":"colSpan","bgcolor":"bgColor","cellspacing":"cellSpacing","cellpadding":"cellPadding"};
}else{
_304=function(node){
return node.attributes;
};
_304.compliant=true;
_304.renames={};
}
this.attributeArray=_304;
var _30d=function(_30e,arr){
var _310=arr[1].split(".");
var str="";
var obj={};
str+="if (!MochiKit."+_310[1]+") { throw new Error(\"";
str+="This function has been deprecated and depends on MochiKit.";
str+=_310[1]+".\");}";
str+="return MochiKit."+_310[1]+"."+arr[0];
str+=".apply(this, arguments);";
obj[_310[2]]=new Function(str);
MochiKit.Base.update(MochiKit[_30e],obj);
};
for(var i;i<MochiKit.DOM.DEPRECATED.length;i++){
_30d("DOM",MochiKit.DOM.DEPRECATED[i]);
}
var _313=this.createDOMFunc;
this.UL=_313("ul");
this.OL=_313("ol");
this.LI=_313("li");
this.TD=_313("td");
this.TR=_313("tr");
this.TBODY=_313("tbody");
this.THEAD=_313("thead");
this.TFOOT=_313("tfoot");
this.TABLE=_313("table");
this.TH=_313("th");
this.INPUT=_313("input");
this.SPAN=_313("span");
this.A=_313("a");
this.DIV=_313("div");
this.IMG=_313("img");
this.BUTTON=_313("button");
this.TT=_313("tt");
this.PRE=_313("pre");
this.H1=_313("h1");
this.H2=_313("h2");
this.H3=_313("h3");
this.BR=_313("br");
this.HR=_313("hr");
this.LABEL=_313("label");
this.TEXTAREA=_313("textarea");
this.FORM=_313("form");
this.P=_313("p");
this.SELECT=_313("select");
this.OPTION=_313("option");
this.OPTGROUP=_313("optgroup");
this.LEGEND=_313("legend");
this.FIELDSET=_313("fieldset");
this.STRONG=_313("strong");
this.CANVAS=_313("canvas");
this.$=this.getElement;
this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
m.nameFunctions(this);
}});
MochiKit.DOM.__new__(((typeof (window)=="undefined")?this:window));
if(MochiKit.__export__){
withWindow=MochiKit.DOM.withWindow;
withDocument=MochiKit.DOM.withDocument;
}
MochiKit.Base._exportSymbols(this,MochiKit.DOM);
if(typeof (dojo)!="undefined"){
dojo.provide("MochiKit.Style");
dojo.require("MochiKit.Base");
dojo.require("MochiKit.DOM");
}
if(typeof (JSAN)!="undefined"){
JSAN.use("MochiKit.Base",[]);
JSAN.use("MochiKit.DOM",[]);
}
try{
if(typeof (MochiKit.Base)=="undefined"){
throw "";
}
}
catch(e){
throw "MochiKit.Style depends on MochiKit.Base!";
}
try{
if(typeof (MochiKit.DOM)=="undefined"){
throw "";
}
}
catch(e){
throw "MochiKit.Style depends on MochiKit.DOM!";
}
if(typeof (MochiKit.Style)=="undefined"){
MochiKit.Style={};
}
MochiKit.Style.NAME="MochiKit.Style";
MochiKit.Style.VERSION="1.4";
MochiKit.Style.__repr__=function(){
return "["+this.NAME+" "+this.VERSION+"]";
};
MochiKit.Style.toString=function(){
return this.__repr__();
};
MochiKit.Style.EXPORT_OK=[];
MochiKit.Style.EXPORT=["setStyle","setOpacity","getStyle","getElementDimensions","elementDimensions","setElementDimensions","getElementPosition","elementPosition","setElementPosition","setDisplayForElement","hideElement","showElement","getViewportDimensions","getViewportPosition","Dimensions","Coordinates"];
MochiKit.Style.Dimensions=function(w,h){
this.w=w;
this.h=h;
};
MochiKit.Style.Dimensions.prototype.__repr__=function(){
var repr=MochiKit.Base.repr;
return "{w: "+repr(this.w)+", h: "+repr(this.h)+"}";
};
MochiKit.Style.Dimensions.prototype.toString=function(){
return this.__repr__();
};
MochiKit.Style.Coordinates=function(x,y){
this.x=x;
this.y=y;
};
MochiKit.Style.Coordinates.prototype.__repr__=function(){
var repr=MochiKit.Base.repr;
return "{x: "+repr(this.x)+", y: "+repr(this.y)+"}";
};
MochiKit.Style.Coordinates.prototype.toString=function(){
return this.__repr__();
};
MochiKit.Base.update(MochiKit.Style,{getStyle:function(elem,_31b){
var dom=MochiKit.DOM;
var d=dom._document;
elem=dom.getElement(elem);
_31b=MochiKit.Base.camelize(_31b);
if(!elem||elem==d){
return undefined;
}
if(_31b=="opacity"&&elem.filters){
var _31e=(MochiKit.Style.getStyle(elem,"filter")||"").match(/alpha\(opacity=(.*)\)/);
if(_31e&&_31e[1]){
return parseFloat(_31e[1])/100;
}
return 1;
}
var _31f=elem.style?elem.style[_31b]:null;
if(!_31f){
if(d.defaultView&&d.defaultView.getComputedStyle){
var css=d.defaultView.getComputedStyle(elem,null);
_31b=_31b.replace(/([A-Z])/g,"-$1").toLowerCase();
_31f=css?css.getPropertyValue(_31b):null;
}else{
if(elem.currentStyle){
_31f=elem.currentStyle[_31b];
}
}
}
if(_31b=="opacity"){
_31f=parseFloat(_31f);
}
if(/Opera/.test(navigator.userAgent)&&(MochiKit.Base.find(["left","top","right","bottom"],_31b)!=-1)){
if(MochiKit.Style.getStyle(elem,"position")=="static"){
_31f="auto";
}
}
return _31f=="auto"?null:_31f;
},setStyle:function(elem,_322){
elem=MochiKit.DOM.getElement(elem);
for(var name in _322){
if(name=="opacity"){
MochiKit.Style.setOpacity(elem,_322[name]);
}else{
elem.style[MochiKit.Base.camelize(name)]=_322[name];
}
}
},setOpacity:function(elem,o){
elem=MochiKit.DOM.getElement(elem);
var self=MochiKit.Style;
if(o==1){
var _327=/Gecko/.test(navigator.userAgent)&&!(/Konqueror|AppleWebKit|KHTML/.test(navigator.userAgent));
elem.style["opacity"]=_327?0.999999:1;
if(/MSIE/.test(navigator.userAgent)){
elem.style["filter"]=self.getStyle(elem,"filter").replace(/alpha\([^\)]*\)/gi,"");
}
}else{
if(o<0.00001){
o=0;
}
elem.style["opacity"]=o;
if(/MSIE/.test(navigator.userAgent)){
elem.style["filter"]=self.getStyle(elem,"filter").replace(/alpha\([^\)]*\)/gi,"")+"alpha(opacity="+o*100+")";
}
}
},getElementPosition:function(elem,_329){
var self=MochiKit.Style;
var dom=MochiKit.DOM;
elem=dom.getElement(elem);
if(!elem||(!(elem.x&&elem.y)&&(!elem.parentNode===null||self.getStyle(elem,"display")=="none"))){
return undefined;
}
var c=new self.Coordinates(0,0);
var box=null;
var _32e=null;
var d=MochiKit.DOM._document;
var de=d.documentElement;
var b=d.body;
if(!elem.parentNode&&elem.x&&elem.y){
c.x+=elem.x||0;
c.y+=elem.y||0;
}else{
if(elem.getBoundingClientRect){
box=elem.getBoundingClientRect();
c.x+=box.left+(de.scrollLeft||b.scrollLeft)-(de.clientLeft||0);
c.y+=box.top+(de.scrollTop||b.scrollTop)-(de.clientTop||0);
}else{
if(elem.offsetParent){
c.x+=elem.offsetLeft;
c.y+=elem.offsetTop;
_32e=elem.offsetParent;
if(_32e!=elem){
while(_32e){
c.x+=_32e.offsetLeft;
c.y+=_32e.offsetTop;
_32e=_32e.offsetParent;
}
}
var ua=navigator.userAgent.toLowerCase();
if((typeof (opera)!="undefined"&&parseFloat(opera.version())<9)||(ua.indexOf("AppleWebKit")!=-1&&self.getStyle(elem,"position")=="absolute")){
c.x-=b.offsetLeft;
c.y-=b.offsetTop;
}
}
}
}
if(typeof (_329)!="undefined"){
_329=arguments.callee(_329);
if(_329){
c.x-=(_329.x||0);
c.y-=(_329.y||0);
}
}
if(elem.parentNode){
_32e=elem.parentNode;
}else{
_32e=null;
}
while(_32e){
var _333=_32e.tagName.toUpperCase();
if(_333==="BODY"||_333==="HTML"){
break;
}
var disp=self.getStyle(_32e,"display");
if(disp!="inline"&&disp!="table-row"){
c.x-=_32e.scrollLeft;
c.y-=_32e.scrollTop;
}
if(_32e.parentNode){
_32e=_32e.parentNode;
}else{
_32e=null;
}
}
return c;
},setElementPosition:function(elem,_336,_337){
elem=MochiKit.DOM.getElement(elem);
if(typeof (_337)=="undefined"){
_337="px";
}
var _338={};
var _339=MochiKit.Base.isUndefinedOrNull;
if(!_339(_336.x)){
_338["left"]=_336.x+_337;
}
if(!_339(_336.y)){
_338["top"]=_336.y+_337;
}
MochiKit.DOM.updateNodeAttributes(elem,{"style":_338});
},getElementDimensions:function(elem){
var self=MochiKit.Style;
var dom=MochiKit.DOM;
if(typeof (elem.w)=="number"||typeof (elem.h)=="number"){
return new self.Dimensions(elem.w||0,elem.h||0);
}
elem=dom.getElement(elem);
if(!elem){
return undefined;
}
var disp=self.getStyle(elem,"display");
if(disp!="none"&&disp!==""&&typeof (disp)!="undefined"){
return new self.Dimensions(elem.offsetWidth||0,elem.offsetHeight||0);
}
var s=elem.style;
var _33f=s.visibility;
var _340=s.position;
s.visibility="hidden";
s.position="absolute";
s.display="";
var _341=elem.offsetWidth;
var _342=elem.offsetHeight;
s.display="none";
s.position=_340;
s.visibility=_33f;
return new self.Dimensions(_341,_342);
},setElementDimensions:function(elem,_344,_345){
elem=MochiKit.DOM.getElement(elem);
if(typeof (_345)=="undefined"){
_345="px";
}
var _346={};
var _347=MochiKit.Base.isUndefinedOrNull;
if(!_347(_344.w)){
_346["width"]=_344.w+_345;
}
if(!_347(_344.h)){
_346["height"]=_344.h+_345;
}
MochiKit.DOM.updateNodeAttributes(elem,{"style":_346});
},setDisplayForElement:function(_348,_349){
var _34a=MochiKit.Base.extend(null,arguments,1);
var _34b=MochiKit.DOM.getElement;
for(var i=0;i<_34a.length;i++){
_349=_34b(_34a[i]);
if(_349){
_349.style.display=_348;
}
}
},getViewportDimensions:function(){
var d=new MochiKit.Style.Dimensions();
var w=MochiKit.DOM._window;
var b=MochiKit.DOM._document.body;
if(w.innerWidth){
d.w=w.innerWidth;
d.h=w.innerHeight;
}else{
if(b.parentElement.clientWidth){
d.w=b.parentElement.clientWidth;
d.h=b.parentElement.clientHeight;
}else{
if(b&&b.clientWidth){
d.w=b.clientWidth;
d.h=b.clientHeight;
}
}
}
return d;
},getViewportPosition:function(){
var c=new MochiKit.Style.Coordinates(0,0);
var d=MochiKit.DOM._document;
var de=d.documentElement;
var db=d.body;
if(de&&(de.scrollTop||de.scrollLeft)){
c.x=de.scrollLeft;
c.y=de.scrollTop;
}else{
if(db){
c.x=db.scrollLeft;
c.y=db.scrollTop;
}
}
return c;
},__new__:function(){
var m=MochiKit.Base;
this.elementPosition=this.getElementPosition;
this.elementDimensions=this.getElementDimensions;
this.hideElement=m.partial(this.setDisplayForElement,"none");
this.showElement=m.partial(this.setDisplayForElement,"block");
this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
m.nameFunctions(this);
}});
MochiKit.Style.__new__();
MochiKit.Base._exportSymbols(this,MochiKit.Style);
if(typeof (dojo)!="undefined"){
dojo.provide("MochiKit.Color");
dojo.require("MochiKit.Base");
dojo.require("MochiKit.DOM");
dojo.require("MochiKit.Style");
}
if(typeof (JSAN)!="undefined"){
JSAN.use("MochiKit.Base",[]);
JSAN.use("MochiKit.DOM",[]);
JSAN.use("MochiKit.Style",[]);
}
try{
if(typeof (MochiKit.Base)=="undefined"){
throw "";
}
}
catch(e){
throw "MochiKit.Color depends on MochiKit.Base";
}
try{
if(typeof (MochiKit.DOM)=="undefined"){
throw "";
}
}
catch(e){
throw "MochiKit.Color depends on MochiKit.DOM";
}
try{
if(typeof (MochiKit.Style)=="undefined"){
throw "";
}
}
catch(e){
throw "MochiKit.Color depends on MochiKit.Style";
}
if(typeof (MochiKit.Color)=="undefined"){
MochiKit.Color={};
}
MochiKit.Color.NAME="MochiKit.Color";
MochiKit.Color.VERSION="1.4";
MochiKit.Color.__repr__=function(){
return "["+this.NAME+" "+this.VERSION+"]";
};
MochiKit.Color.toString=function(){
return this.__repr__();
};
MochiKit.Color.Color=function(red,_356,blue,_358){
if(typeof (_358)=="undefined"||_358===null){
_358=1;
}
this.rgb={r:red,g:_356,b:blue,a:_358};
};
MochiKit.Color.Color.prototype={__class__:MochiKit.Color.Color,colorWithAlpha:function(_359){
var rgb=this.rgb;
var m=MochiKit.Color;
return m.Color.fromRGB(rgb.r,rgb.g,rgb.b,_359);
},colorWithHue:function(hue){
var hsl=this.asHSL();
hsl.h=hue;
var m=MochiKit.Color;
return m.Color.fromHSL(hsl);
},colorWithSaturation:function(_35f){
var hsl=this.asHSL();
hsl.s=_35f;
var m=MochiKit.Color;
return m.Color.fromHSL(hsl);
},colorWithLightness:function(_362){
var hsl=this.asHSL();
hsl.l=_362;
var m=MochiKit.Color;
return m.Color.fromHSL(hsl);
},darkerColorWithLevel:function(_365){
var hsl=this.asHSL();
hsl.l=Math.max(hsl.l-_365,0);
var m=MochiKit.Color;
return m.Color.fromHSL(hsl);
},lighterColorWithLevel:function(_368){
var hsl=this.asHSL();
hsl.l=Math.min(hsl.l+_368,1);
var m=MochiKit.Color;
return m.Color.fromHSL(hsl);
},blendedColor:function(_36b,_36c){
if(typeof (_36c)=="undefined"||_36c===null){
_36c=0.5;
}
var sf=1-_36c;
var s=this.rgb;
var d=_36b.rgb;
var df=_36c;
return MochiKit.Color.Color.fromRGB((s.r*sf)+(d.r*df),(s.g*sf)+(d.g*df),(s.b*sf)+(d.b*df),(s.a*sf)+(d.a*df));
},compareRGB:function(_371){
var a=this.asRGB();
var b=_371.asRGB();
return MochiKit.Base.compare([a.r,a.g,a.b,a.a],[b.r,b.g,b.b,b.a]);
},isLight:function(){
return this.asHSL().b>0.5;
},isDark:function(){
return (!this.isLight());
},toHSLString:function(){
var c=this.asHSL();
var ccc=MochiKit.Color.clampColorComponent;
var rval=this._hslString;
if(!rval){
var mid=(ccc(c.h,360).toFixed(0)+","+ccc(c.s,100).toPrecision(4)+"%"+","+ccc(c.l,100).toPrecision(4)+"%");
var a=c.a;
if(a>=1){
a=1;
rval="hsl("+mid+")";
}else{
if(a<=0){
a=0;
}
rval="hsla("+mid+","+a+")";
}
this._hslString=rval;
}
return rval;
},toRGBString:function(){
var c=this.rgb;
var ccc=MochiKit.Color.clampColorComponent;
var rval=this._rgbString;
if(!rval){
var mid=(ccc(c.r,255).toFixed(0)+","+ccc(c.g,255).toFixed(0)+","+ccc(c.b,255).toFixed(0));
if(c.a!=1){
rval="rgba("+mid+","+c.a+")";
}else{
rval="rgb("+mid+")";
}
this._rgbString=rval;
}
return rval;
},asRGB:function(){
return MochiKit.Base.clone(this.rgb);
},toHexString:function(){
var m=MochiKit.Color;
var c=this.rgb;
var ccc=MochiKit.Color.clampColorComponent;
var rval=this._hexString;
if(!rval){
rval=("#"+m.toColorPart(ccc(c.r,255))+m.toColorPart(ccc(c.g,255))+m.toColorPart(ccc(c.b,255)));
this._hexString=rval;
}
return rval;
},asHSV:function(){
var hsv=this.hsv;
var c=this.rgb;
if(typeof (hsv)=="undefined"||hsv===null){
hsv=MochiKit.Color.rgbToHSV(this.rgb);
this.hsv=hsv;
}
return MochiKit.Base.clone(hsv);
},asHSL:function(){
var hsl=this.hsl;
var c=this.rgb;
if(typeof (hsl)=="undefined"||hsl===null){
hsl=MochiKit.Color.rgbToHSL(this.rgb);
this.hsl=hsl;
}
return MochiKit.Base.clone(hsl);
},toString:function(){
return this.toRGBString();
},repr:function(){
var c=this.rgb;
var col=[c.r,c.g,c.b,c.a];
return this.__class__.NAME+"("+col.join(", ")+")";
}};
MochiKit.Base.update(MochiKit.Color.Color,{fromRGB:function(red,_388,blue,_38a){
var _38b=MochiKit.Color.Color;
if(arguments.length==1){
var rgb=red;
red=rgb.r;
_388=rgb.g;
blue=rgb.b;
if(typeof (rgb.a)=="undefined"){
_38a=undefined;
}else{
_38a=rgb.a;
}
}
return new _38b(red,_388,blue,_38a);
},fromHSL:function(hue,_38e,_38f,_390){
var m=MochiKit.Color;
return m.Color.fromRGB(m.hslToRGB.apply(m,arguments));
},fromHSV:function(hue,_393,_394,_395){
var m=MochiKit.Color;
return m.Color.fromRGB(m.hsvToRGB.apply(m,arguments));
},fromName:function(name){
var _398=MochiKit.Color.Color;
if(name.charAt(0)=="\""){
name=name.substr(1,name.length-2);
}
var _399=_398._namedColors[name.toLowerCase()];
if(typeof (_399)=="string"){
return _398.fromHexString(_399);
}else{
if(name=="transparent"){
return _398.transparentColor();
}
}
return null;
},fromString:function(_39a){
var self=MochiKit.Color.Color;
var _39c=_39a.substr(0,3);
if(_39c=="rgb"){
return self.fromRGBString(_39a);
}else{
if(_39c=="hsl"){
return self.fromHSLString(_39a);
}else{
if(_39a.charAt(0)=="#"){
return self.fromHexString(_39a);
}
}
}
return self.fromName(_39a);
},fromHexString:function(_39d){
if(_39d.charAt(0)=="#"){
_39d=_39d.substring(1);
}
var _39e=[];
var i,hex;
if(_39d.length==3){
for(i=0;i<3;i++){
hex=_39d.substr(i,1);
_39e.push(parseInt(hex+hex,16)/255);
}
}else{
for(i=0;i<6;i+=2){
hex=_39d.substr(i,2);
_39e.push(parseInt(hex,16)/255);
}
}
var _3a1=MochiKit.Color.Color;
return _3a1.fromRGB.apply(_3a1,_39e);
},_fromColorString:function(pre,_3a3,_3a4,_3a5){
if(_3a5.indexOf(pre)===0){
_3a5=_3a5.substring(_3a5.indexOf("(",3)+1,_3a5.length-1);
}
var _3a6=_3a5.split(/\s*,\s*/);
var _3a7=[];
for(var i=0;i<_3a6.length;i++){
var c=_3a6[i];
var val;
var _3ab=c.substring(c.length-3);
if(c.charAt(c.length-1)=="%"){
val=0.01*parseFloat(c.substring(0,c.length-1));
}else{
if(_3ab=="deg"){
val=parseFloat(c)/360;
}else{
if(_3ab=="rad"){
val=parseFloat(c)/(Math.PI*2);
}else{
val=_3a4[i]*parseFloat(c);
}
}
}
_3a7.push(val);
}
return this[_3a3].apply(this,_3a7);
},fromComputedStyle:function(elem,_3ad){
var d=MochiKit.DOM;
var cls=MochiKit.Color.Color;
for(elem=d.getElement(elem);elem;elem=elem.parentNode){
var _3b0=MochiKit.Style.getStyle.apply(d,arguments);
if(!_3b0){
continue;
}
var _3b1=cls.fromString(_3b0);
if(!_3b1){
break;
}
if(_3b1.asRGB().a>0){
return _3b1;
}
}
return null;
},fromBackground:function(elem){
var cls=MochiKit.Color.Color;
return cls.fromComputedStyle(elem,"backgroundColor","background-color")||cls.whiteColor();
},fromText:function(elem){
var cls=MochiKit.Color.Color;
return cls.fromComputedStyle(elem,"color","color")||cls.blackColor();
},namedColors:function(){
return MochiKit.Base.clone(MochiKit.Color.Color._namedColors);
}});
MochiKit.Base.update(MochiKit.Color,{clampColorComponent:function(v,_3b7){
v*=_3b7;
if(v<0){
return 0;
}else{
if(v>_3b7){
return _3b7;
}else{
return v;
}
}
},_hslValue:function(n1,n2,hue){
if(hue>6){
hue-=6;
}else{
if(hue<0){
hue+=6;
}
}
var val;
if(hue<1){
val=n1+(n2-n1)*hue;
}else{
if(hue<3){
val=n2;
}else{
if(hue<4){
val=n1+(n2-n1)*(4-hue);
}else{
val=n1;
}
}
}
return val;
},hsvToRGB:function(hue,_3bd,_3be,_3bf){
if(arguments.length==1){
var hsv=hue;
hue=hsv.h;
_3bd=hsv.s;
_3be=hsv.v;
_3bf=hsv.a;
}
var red;
var _3c2;
var blue;
if(_3bd===0){
red=_3be;
_3c2=_3be;
blue=_3be;
}else{
var i=Math.floor(hue*6);
var f=(hue*6)-i;
var p=_3be*(1-_3bd);
var q=_3be*(1-(_3bd*f));
var t=_3be*(1-(_3bd*(1-f)));
switch(i){
case 1:
red=q;
_3c2=_3be;
blue=p;
break;
case 2:
red=p;
_3c2=_3be;
blue=t;
break;
case 3:
red=p;
_3c2=q;
blue=_3be;
break;
case 4:
red=t;
_3c2=p;
blue=_3be;
break;
case 5:
red=_3be;
_3c2=p;
blue=q;
break;
case 6:
case 0:
red=_3be;
_3c2=t;
blue=p;
break;
}
}
return {r:red,g:_3c2,b:blue,a:_3bf};
},hslToRGB:function(hue,_3ca,_3cb,_3cc){
if(arguments.length==1){
var hsl=hue;
hue=hsl.h;
_3ca=hsl.s;
_3cb=hsl.l;
_3cc=hsl.a;
}
var red;
var _3cf;
var blue;
if(_3ca===0){
red=_3cb;
_3cf=_3cb;
blue=_3cb;
}else{
var m2;
if(_3cb<=0.5){
m2=_3cb*(1+_3ca);
}else{
m2=_3cb+_3ca-(_3cb*_3ca);
}
var m1=(2*_3cb)-m2;
var f=MochiKit.Color._hslValue;
var h6=hue*6;
red=f(m1,m2,h6+2);
_3cf=f(m1,m2,h6);
blue=f(m1,m2,h6-2);
}
return {r:red,g:_3cf,b:blue,a:_3cc};
},rgbToHSV:function(red,_3d6,blue,_3d8){
if(arguments.length==1){
var rgb=red;
red=rgb.r;
_3d6=rgb.g;
blue=rgb.b;
_3d8=rgb.a;
}
var max=Math.max(Math.max(red,_3d6),blue);
var min=Math.min(Math.min(red,_3d6),blue);
var hue;
var _3dd;
var _3de=max;
if(min==max){
hue=0;
_3dd=0;
}else{
var _3df=(max-min);
_3dd=_3df/max;
if(red==max){
hue=(_3d6-blue)/_3df;
}else{
if(_3d6==max){
hue=2+((blue-red)/_3df);
}else{
hue=4+((red-_3d6)/_3df);
}
}
hue/=6;
if(hue<0){
hue+=1;
}
if(hue>1){
hue-=1;
}
}
return {h:hue,s:_3dd,v:_3de,a:_3d8};
},rgbToHSL:function(red,_3e1,blue,_3e3){
if(arguments.length==1){
var rgb=red;
red=rgb.r;
_3e1=rgb.g;
blue=rgb.b;
_3e3=rgb.a;
}
var max=Math.max(red,Math.max(_3e1,blue));
var min=Math.min(red,Math.min(_3e1,blue));
var hue;
var _3e8;
var _3e9=(max+min)/2;
var _3ea=max-min;
if(_3ea===0){
hue=0;
_3e8=0;
}else{
if(_3e9<=0.5){
_3e8=_3ea/(max+min);
}else{
_3e8=_3ea/(2-max-min);
}
if(red==max){
hue=(_3e1-blue)/_3ea;
}else{
if(_3e1==max){
hue=2+((blue-red)/_3ea);
}else{
hue=4+((red-_3e1)/_3ea);
}
}
hue/=6;
if(hue<0){
hue+=1;
}
if(hue>1){
hue-=1;
}
}
return {h:hue,s:_3e8,l:_3e9,a:_3e3};
},toColorPart:function(num){
num=Math.round(num);
var _3ec=num.toString(16);
if(num<16){
return "0"+_3ec;
}
return _3ec;
},__new__:function(){
var m=MochiKit.Base;
this.Color.fromRGBString=m.bind(this.Color._fromColorString,this.Color,"rgb","fromRGB",[1/255,1/255,1/255,1]);
this.Color.fromHSLString=m.bind(this.Color._fromColorString,this.Color,"hsl","fromHSL",[1/360,0.01,0.01,1]);
var _3ee=1/3;
var _3ef={black:[0,0,0],blue:[0,0,1],brown:[0.6,0.4,0.2],cyan:[0,1,1],darkGray:[_3ee,_3ee,_3ee],gray:[0.5,0.5,0.5],green:[0,1,0],lightGray:[2*_3ee,2*_3ee,2*_3ee],magenta:[1,0,1],orange:[1,0.5,0],purple:[0.5,0,0.5],red:[1,0,0],transparent:[0,0,0,0],white:[1,1,1],yellow:[1,1,0]};
var _3f0=function(name,r,g,b,a){
var rval=this.fromRGB(r,g,b,a);
this[name]=function(){
return rval;
};
return rval;
};
for(var k in _3ef){
var name=k+"Color";
var _3f9=m.concat([_3f0,this.Color,name],_3ef[k]);
this.Color[name]=m.bind.apply(null,_3f9);
}
var _3fa=function(){
for(var i=0;i<arguments.length;i++){
if(!(arguments[i] instanceof Color)){
return false;
}
}
return true;
};
var _3fc=function(a,b){
return a.compareRGB(b);
};
m.nameFunctions(this);
m.registerComparator(this.Color.NAME,_3fa,_3fc);
this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
}});
MochiKit.Color.EXPORT=["Color"];
MochiKit.Color.EXPORT_OK=["clampColorComponent","rgbToHSL","hslToRGB","rgbToHSV","hsvToRGB","toColorPart"];
MochiKit.Color.__new__();
MochiKit.Base._exportSymbols(this,MochiKit.Color);
MochiKit.Color.Color._namedColors={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"};
if(typeof (dojo)!="undefined"){
dojo.provide("MochiKit.Signal");
dojo.require("MochiKit.Base");
dojo.require("MochiKit.DOM");
dojo.require("MochiKit.Style");
}
if(typeof (JSAN)!="undefined"){
JSAN.use("MochiKit.Base",[]);
JSAN.use("MochiKit.DOM",[]);
JSAN.use("MochiKit.Style",[]);
}
try{
if(typeof (MochiKit.Base)=="undefined"){
throw "";
}
}
catch(e){
throw "MochiKit.Signal depends on MochiKit.Base!";
}
try{
if(typeof (MochiKit.DOM)=="undefined"){
throw "";
}
}
catch(e){
throw "MochiKit.Signal depends on MochiKit.DOM!";
}
try{
if(typeof (MochiKit.Style)=="undefined"){
throw "";
}
}
catch(e){
throw "MochiKit.Signal depends on MochiKit.Style!";
}
if(typeof (MochiKit.Signal)=="undefined"){
MochiKit.Signal={};
}
MochiKit.Signal.NAME="MochiKit.Signal";
MochiKit.Signal.VERSION="1.4";
MochiKit.Signal._observers=[];
MochiKit.Signal.Event=function(src,e){
this._event=e||window.event;
this._src=src;
};
MochiKit.Base.update(MochiKit.Signal.Event.prototype,{__repr__:function(){
var repr=MochiKit.Base.repr;
var str="{event(): "+repr(this.event())+", src(): "+repr(this.src())+", type(): "+repr(this.type())+", target(): "+repr(this.target());
if(this.type()&&this.type().indexOf("key")===0||this.type().indexOf("mouse")===0||this.type().indexOf("click")!=-1||this.type()=="contextmenu"){
str+=", modifier(): "+"{alt: "+repr(this.modifier().alt)+", ctrl: "+repr(this.modifier().ctrl)+", meta: "+repr(this.modifier().meta)+", shift: "+repr(this.modifier().shift)+", any: "+repr(this.modifier().any)+"}";
}
if(this.type()&&this.type().indexOf("key")===0){
str+=", key(): {code: "+repr(this.key().code)+", string: "+repr(this.key().string)+"}";
}
if(this.type()&&(this.type().indexOf("mouse")===0||this.type().indexOf("click")!=-1||this.type()=="contextmenu")){
str+=", mouse(): {page: "+repr(this.mouse().page)+", client: "+repr(this.mouse().client);
if(this.type()!="mousemove"){
str+=", button: {left: "+repr(this.mouse().button.left)+", middle: "+repr(this.mouse().button.middle)+", right: "+repr(this.mouse().button.right)+"}}";
}else{
str+="}";
}
}
if(this.type()=="mouseover"||this.type()=="mouseout"){
str+=", relatedTarget(): "+repr(this.relatedTarget());
}
str+="}";
return str;
},toString:function(){
return this.__repr__();
},src:function(){
return this._src;
},event:function(){
return this._event;
},type:function(){
return this._event.type||undefined;
},target:function(){
return this._event.target||this._event.srcElement;
},_relatedTarget:null,relatedTarget:function(){
if(this._relatedTarget!==null){
return this._relatedTarget;
}
var elem=null;
if(this.type()=="mouseover"){
elem=(this._event.relatedTarget||this._event.fromElement);
}else{
if(this.type()=="mouseout"){
elem=(this._event.relatedTarget||this._event.toElement);
}
}
if(elem!==null){
this._relatedTarget=elem;
return elem;
}
return undefined;
},_modifier:null,modifier:function(){
if(this._modifier!==null){
return this._modifier;
}
var m={};
m.alt=this._event.altKey;
m.ctrl=this._event.ctrlKey;
m.meta=this._event.metaKey||false;
m.shift=this._event.shiftKey;
m.any=m.alt||m.ctrl||m.shift||m.meta;
this._modifier=m;
return m;
},_key:null,key:function(){
if(this._key!==null){
return this._key;
}
var k={};
if(this.type()&&this.type().indexOf("key")===0){
if(this.type()=="keydown"||this.type()=="keyup"){
k.code=this._event.keyCode;
k.string=(MochiKit.Signal._specialKeys[k.code]||"KEY_UNKNOWN");
this._key=k;
return k;
}else{
if(this.type()=="keypress"){
k.code=0;
k.string="";
if(typeof (this._event.charCode)!="undefined"&&this._event.charCode!==0&&!MochiKit.Signal._specialMacKeys[this._event.charCode]){
k.code=this._event.charCode;
k.string=String.fromCharCode(k.code);
}else{
if(this._event.keyCode&&typeof (this._event.charCode)=="undefined"){
k.code=this._event.keyCode;
k.string=String.fromCharCode(k.code);
}
}
this._key=k;
return k;
}
}
}
return undefined;
},_mouse:null,mouse:function(){
if(this._mouse!==null){
return this._mouse;
}
var m={};
var e=this._event;
if(this.type()&&(this.type().indexOf("mouse")===0||this.type().indexOf("click")!=-1||this.type()=="contextmenu")){
m.client=new MochiKit.Style.Coordinates(0,0);
if(e.clientX||e.clientY){
m.client.x=(!e.clientX||e.clientX<0)?0:e.clientX;
m.client.y=(!e.clientY||e.clientY<0)?0:e.clientY;
}
m.page=new MochiKit.Style.Coordinates(0,0);
if(e.pageX||e.pageY){
m.page.x=(!e.pageX||e.pageX<0)?0:e.pageX;
m.page.y=(!e.pageY||e.pageY<0)?0:e.pageY;
}else{
var de=MochiKit.DOM._document.documentElement;
var b=MochiKit.DOM._document.body;
m.page.x=e.clientX+(de.scrollLeft||b.scrollLeft)-(de.clientLeft||0);
m.page.y=e.clientY+(de.scrollTop||b.scrollTop)-(de.clientTop||0);
}
if(this.type()!="mousemove"){
m.button={};
m.button.left=false;
m.button.right=false;
m.button.middle=false;
if(e.which){
m.button.left=(e.which==1);
m.button.middle=(e.which==2);
m.button.right=(e.which==3);
}else{
m.button.left=!!(e.button&1);
m.button.right=!!(e.button&2);
m.button.middle=!!(e.button&4);
}
}
this._mouse=m;
return m;
}
return undefined;
},stop:function(){
this.stopPropagation();
this.preventDefault();
},stopPropagation:function(){
if(this._event.stopPropagation){
this._event.stopPropagation();
}else{
this._event.cancelBubble=true;
}
},preventDefault:function(){
if(this._event.preventDefault){
this._event.preventDefault();
}else{
if(this._confirmUnload===null){
this._event.returnValue=false;
}
}
},_confirmUnload:null,confirmUnload:function(msg){
if(this.type()=="beforeunload"){
this._confirmUnload=msg;
this._event.returnValue=msg;
}
}});
MochiKit.Signal._specialMacKeys={3:"KEY_ENTER",63289:"KEY_NUM_PAD_CLEAR",63276:"KEY_PAGE_UP",63277:"KEY_PAGE_DOWN",63275:"KEY_END",63273:"KEY_HOME",63234:"KEY_ARROW_LEFT",63232:"KEY_ARROW_UP",63235:"KEY_ARROW_RIGHT",63233:"KEY_ARROW_DOWN",63302:"KEY_INSERT",63272:"KEY_DELETE"};
(function(){
var _40b=MochiKit.Signal._specialMacKeys;
for(i=63236;i<=63242;i++){
_40b[i]="KEY_F"+(i-63236+1);
}
})();
MochiKit.Signal._specialKeys={8:"KEY_BACKSPACE",9:"KEY_TAB",12:"KEY_NUM_PAD_CLEAR",13:"KEY_ENTER",16:"KEY_SHIFT",17:"KEY_CTRL",18:"KEY_ALT",19:"KEY_PAUSE",20:"KEY_CAPS_LOCK",27:"KEY_ESCAPE",32:"KEY_SPACEBAR",33:"KEY_PAGE_UP",34:"KEY_PAGE_DOWN",35:"KEY_END",36:"KEY_HOME",37:"KEY_ARROW_LEFT",38:"KEY_ARROW_UP",39:"KEY_ARROW_RIGHT",40:"KEY_ARROW_DOWN",44:"KEY_PRINT_SCREEN",45:"KEY_INSERT",46:"KEY_DELETE",59:"KEY_SEMICOLON",91:"KEY_WINDOWS_LEFT",92:"KEY_WINDOWS_RIGHT",93:"KEY_SELECT",106:"KEY_NUM_PAD_ASTERISK",107:"KEY_NUM_PAD_PLUS_SIGN",109:"KEY_NUM_PAD_HYPHEN-MINUS",110:"KEY_NUM_PAD_FULL_STOP",111:"KEY_NUM_PAD_SOLIDUS",144:"KEY_NUM_LOCK",145:"KEY_SCROLL_LOCK",186:"KEY_SEMICOLON",187:"KEY_EQUALS_SIGN",188:"KEY_COMMA",189:"KEY_HYPHEN-MINUS",190:"KEY_FULL_STOP",191:"KEY_SOLIDUS",192:"KEY_GRAVE_ACCENT",219:"KEY_LEFT_SQUARE_BRACKET",220:"KEY_REVERSE_SOLIDUS",221:"KEY_RIGHT_SQUARE_BRACKET",222:"KEY_APOSTROPHE"};
(function(){
var _40c=MochiKit.Signal._specialKeys;
for(var i=48;i<=57;i++){
_40c[i]="KEY_"+(i-48);
}
for(i=65;i<=90;i++){
_40c[i]="KEY_"+String.fromCharCode(i);
}
for(i=96;i<=105;i++){
_40c[i]="KEY_NUM_PAD_"+(i-96);
}
for(i=112;i<=123;i++){
_40c[i]="KEY_F"+(i-112+1);
}
})();
MochiKit.Signal.Ident=function(_40e){
this.source=_40e.source;
this.signal=_40e.signal;
this.listener=_40e.listener;
this.isDOM=_40e.isDOM;
this.objOrFunc=_40e.objOrFunc;
this.funcOrStr=_40e.funcOrStr;
this.connected=_40e.connected;
};
MochiKit.Signal.Ident.prototype={};
MochiKit.Base.update(MochiKit.Signal,{__repr__:function(){
return "["+this.NAME+" "+this.VERSION+"]";
},toString:function(){
return this.__repr__();
},_unloadCache:function(){
var self=MochiKit.Signal;
var _410=self._observers;
for(var i=0;i<_410.length;i++){
if(_410[i].signal!=="onload"&&_410[i].signal!=="onunload"){
self._disconnect(_410[i]);
}
}
},_listener:function(src,sig,func,obj,_416){
var self=MochiKit.Signal;
var E=self.Event;
if(!_416){
return MochiKit.Base.bind(func,obj);
}
obj=obj||src;
if(typeof (func)=="string"){
if(sig==="onload"||sig==="onunload"){
return function(_419){
obj[func].apply(obj,[new E(src,_419)]);
var _41a=new MochiKit.Signal.Ident({source:src,signal:sig,objOrFunc:obj,funcOrStr:func});
MochiKit.Signal._disconnect(_41a);
};
}else{
return function(_41b){
obj[func].apply(obj,[new E(src,_41b)]);
};
}
}else{
if(sig==="onload"||sig==="onunload"){
return function(_41c){
func.apply(obj,[new E(src,_41c)]);
MochiKit.Signal.disconnect(src,sig,func);
var _41d=new MochiKit.Signal.Ident({source:src,signal:sig,objOrFunc:func});
MochiKit.Signal._disconnect(_41d);
};
}else{
return function(_41e){
func.apply(obj,[new E(src,_41e)]);
};
}
}
},_browserAlreadyHasMouseEnterAndLeave:function(){
return /MSIE/.test(navigator.userAgent);
},_mouseEnterListener:function(src,sig,func,obj){
var E=MochiKit.Signal.Event;
return function(_424){
var e=new E(src,_424);
try{
e.relatedTarget().nodeName;
}
catch(err){
return;
}
e.stop();
if(MochiKit.DOM.isChildNode(e.relatedTarget(),src)){
return;
}
e.type=function(){
return sig;
};
if(typeof (func)=="string"){
return obj[func].apply(obj,[e]);
}else{
return func.apply(obj,[e]);
}
};
},_getDestPair:function(_426,_427){
var obj=null;
var func=null;
if(typeof (_427)!="undefined"){
obj=_426;
func=_427;
if(typeof (_427)=="string"){
if(typeof (_426[_427])!="function"){
throw new Error("'funcOrStr' must be a function on 'objOrFunc'");
}
}else{
if(typeof (_427)!="function"){
throw new Error("'funcOrStr' must be a function or string");
}
}
}else{
if(typeof (_426)!="function"){
throw new Error("'objOrFunc' must be a function if 'funcOrStr' is not given");
}else{
func=_426;
}
}
return [obj,func];
},connect:function(src,sig,_42c,_42d){
src=MochiKit.DOM.getElement(src);
var self=MochiKit.Signal;
if(typeof (sig)!="string"){
throw new Error("'sig' must be a string");
}
var _42f=self._getDestPair(_42c,_42d);
var obj=_42f[0];
var func=_42f[1];
if(typeof (obj)=="undefined"||obj===null){
obj=src;
}
var _432=!!(src.addEventListener||src.attachEvent);
if(_432&&(sig==="onmouseenter"||sig==="onmouseleave")&&!self._browserAlreadyHasMouseEnterAndLeave()){
var _433=self._mouseEnterListener(src,sig.substr(2),func,obj);
if(sig==="onmouseenter"){
sig="onmouseover";
}else{
sig="onmouseout";
}
}else{
var _433=self._listener(src,sig,func,obj,_432);
}
if(src.addEventListener){
src.addEventListener(sig.substr(2),_433,false);
}else{
if(src.attachEvent){
src.attachEvent(sig,_433);
}
}
var _434=new MochiKit.Signal.Ident({source:src,signal:sig,listener:_433,isDOM:_432,objOrFunc:_42c,funcOrStr:_42d,connected:true});
self._observers.push(_434);
if(!_432&&typeof (src.__connect__)=="function"){
var args=MochiKit.Base.extend([_434],arguments,1);
src.__connect__.apply(src,args);
}
return _434;
},_disconnect:function(_436){
if(!_436.connected){
return;
}
_436.connected=false;
if(!_436.isDOM){
return;
}
var src=_436.source;
var sig=_436.signal;
var _439=_436.listener;
if(src.removeEventListener){
src.removeEventListener(sig.substr(2),_439,false);
}else{
if(src.detachEvent){
src.detachEvent(sig,_439);
}else{
throw new Error("'src' must be a DOM element");
}
}
},disconnect:function(_43a){
var self=MochiKit.Signal;
var _43c=self._observers;
var m=MochiKit.Base;
if(arguments.length>1){
var src=MochiKit.DOM.getElement(arguments[0]);
var sig=arguments[1];
var obj=arguments[2];
var func=arguments[3];
for(var i=_43c.length-1;i>=0;i--){
var o=_43c[i];
if(o.source===src&&o.signal===sig&&o.objOrFunc===obj&&o.funcOrStr===func){
self._disconnect(o);
if(!self._lock){
_43c.splice(i,1);
}else{
self._dirty=true;
}
return true;
}
}
}else{
var idx=m.findIdentical(_43c,_43a);
if(idx>=0){
self._disconnect(_43a);
if(!self._lock){
_43c.splice(idx,1);
}else{
self._dirty=true;
}
return true;
}
}
return false;
},disconnectAllTo:function(_445,_446){
var self=MochiKit.Signal;
var _448=self._observers;
var _449=self._disconnect;
var _44a=self._lock;
var _44b=self._dirty;
if(typeof (_446)==="undefined"){
_446=null;
}
for(var i=_448.length-1;i>=0;i--){
var _44d=_448[i];
if(_44d.objOrFunc===_445&&(_446===null||_44d.funcOrStr===_446)){
_449(_44d);
if(_44a){
_44b=true;
}else{
_448.splice(i,1);
}
}
}
self._dirty=_44b;
},disconnectAll:function(src,sig){
src=MochiKit.DOM.getElement(src);
var m=MochiKit.Base;
var _451=m.flattenArguments(m.extend(null,arguments,1));
var self=MochiKit.Signal;
var _453=self._disconnect;
var _454=self._observers;
var i,_456;
var _457=self._lock;
var _458=self._dirty;
if(_451.length===0){
for(i=_454.length-1;i>=0;i--){
_456=_454[i];
if(_456.source===src){
_453(_456);
if(!_457){
_454.splice(i,1);
}else{
_458=true;
}
}
}
}else{
var sigs={};
for(i=0;i<_451.length;i++){
sigs[_451[i]]=true;
}
for(i=_454.length-1;i>=0;i--){
_456=_454[i];
if(_456.source===src&&_456.signal in sigs){
_453(_456);
if(!_457){
_454.splice(i,1);
}else{
_458=true;
}
}
}
}
self._dirty=_458;
},signal:function(src,sig){
var self=MochiKit.Signal;
var _45d=self._observers;
src=MochiKit.DOM.getElement(src);
var args=MochiKit.Base.extend(null,arguments,2);
var _45f=[];
self._lock=true;
for(var i=0;i<_45d.length;i++){
var _461=_45d[i];
if(_461.source===src&&_461.signal===sig){
try{
_461.listener.apply(src,args);
}
catch(e){
_45f.push(e);
}
}
}
self._lock=false;
if(self._dirty){
self._dirty=false;
for(var i=_45d.length-1;i>=0;i--){
if(!_45d[i].connected){
_45d.splice(i,1);
}
}
}
if(_45f.length==1){
throw _45f[0];
}else{
if(_45f.length>1){
var e=new Error("Multiple errors thrown in handling 'sig', see errors property");
e.errors=_45f;
throw e;
}
}
}});
MochiKit.Signal.EXPORT_OK=[];
MochiKit.Signal.EXPORT=["connect","disconnect","signal","disconnectAll","disconnectAllTo"];
MochiKit.Signal.__new__=function(win){
var m=MochiKit.Base;
this._document=document;
this._window=win;
this._lock=false;
this._dirty=false;
try{
this.connect(window,"onunload",this._unloadCache);
}
catch(e){
}
this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
m.nameFunctions(this);
};
MochiKit.Signal.__new__(this);
if(MochiKit.__export__){
connect=MochiKit.Signal.connect;
disconnect=MochiKit.Signal.disconnect;
disconnectAll=MochiKit.Signal.disconnectAll;
signal=MochiKit.Signal.signal;
}
MochiKit.Base._exportSymbols(this,MochiKit.Signal);


/***

    PlotKit.PlotKit 0.9.1 : PACKED VERSION

    THIS FILE IS AUTOMATICALLY GENERATED.  If creating patches, please
    diff against the source tree, not this file.

    For more information, <http://www.liquidx.net/plotkit/>.
    
    Copyright (c) 2006. Alastair Tse.

***/

try{
if(typeof (MochiKit.Base)=="undefined"||typeof (MochiKit.DOM)=="undefined"||typeof (MochiKit.Color)=="undefined"||typeof (MochiKit.Format)=="undefined"){
throw "";
}
}
catch(e){
throw "PlotKit depends on MochiKit.{Base,Color,DOM,Format}";
}
MochiKit.Base.update(MochiKit.Color.Color.prototype,{asFillColor:function(){
return this.lighterColorWithLevel(0.3);
},asStrokeColor:function(){
return this.darkerColorWithLevel(0.1);
},asPointColor:function(){
return this.lighterColorWithLevel(0.1);
}});
if(typeof (PlotKit)=="undefined"){
PlotKit={};
}
PlotKit.NAME="PlotKit";
PlotKit.VERSION="0.8";
PlotKit.__repr__=function(){
return "["+this.NAME+" "+this.VERSION+"]";
};
PlotKit.toString=function(){
return this.__repr__();
};
if(typeof (PlotKit.Base)=="undefined"){
PlotKit.Base={};
}
PlotKit.Base.NAME="PlotKit.Base";
PlotKit.Base.VERSION=PlotKit.VERSION;
PlotKit.Base.__repr__=function(){
return "["+this.NAME+" "+this.VERSION+"]";
};
PlotKit.Base.toString=function(){
return this.__repr__();
};
PlotKit.Base.usingPrototype=function(){
try{
return (typeof (Object.extend)=="function");
}
catch(e){
return false;
}
};
MochiKit.Base.update(PlotKit.Base,{roundInterval:function(_1,_2,_3){
var _4=MochiKit.Format.roundToFixed;
var _5=_1/_2;
return parseFloat(_4(_5,_3));
},collapse:function(_6){
var m=MochiKit.Base;
var _8=new Array();
for(var i=0;i<_6.length;i++){
_8=m.concat(_8,_6[i]);
}
if(PlotKit.Base.usingPrototype()){
delete _8.extend;
delete _8.from;
delete _8.inspect;
}
return _8;
},uniq:function(_10){
var m=MochiKit.Base;
if(!m.isArrayLike(_10)||(_10.length<1)){
return new Array();
}
var _11=new Array();
var _12=_10[0];
_11.push(_10[0]);
for(var i=1;i<_10.length;i++){
if(m.compare(_10[i],_12)!=0){
_12=_10[i];
_11.push(_10[i]);
}
}
return _11;
},colorScheme:function(){
var mb=MochiKit.Base;
var mc=MochiKit.Color;
var _15=["red","orange","yellow","green","cyan","blue","purple","magenta"];
var _16=function(_17){
return mc.Color[_17+"Color"]();
};
return mb.map(_16,_15);
},baseDarkPrimaryColors:function(){
var _18=MochiKit.Color.Color.fromHexString;
return [_18("#ad3f40"),_18("#ddac2c"),_18("#dfdd0c"),_18("#5276c4"),_18("#739c5a")];
},basePrimaryColors:function(){
var _19=MochiKit.Color.Color.fromHexString;
return [_19("#d24c4d"),_19("#f2b32f"),_19("#ece90e"),_19("#5d83da"),_19("#78a15d")];
},baseBlueColors:function(){
var _20=MochiKit.Color.Color.fromHexString;
return [_20("#4b6b94"),_20("#5d81b4"),_20("#acbad2")];
},palette:function(_21,_22,_23,_24){
var _25=MochiKit.Base.isUndefinedOrNull;
var _26=new Array();
if(_25(_24)){
_24=0.1;
}
if(_25(_23)){
_23=0.4;
}
if(_25(_22)){
_22=-0.2;
}
var _27=_22;
while(_27<=_23){
_26.push(_27);
_27+=_24;
}
var _28=function(_29,_30){
return _29.lighterColorWithLevel(_30);
};
return MochiKit.Base.map(partial(_28,_21),_26);
},excanvasSupported:function(){
if(/MSIE/.test(navigator.userAgent)&&!window.opera){
return true;
}
return false;
},findPosX:function(obj){
var _32=0;
if(obj.offsetParent){
while(obj.offsetParent){
_32+=obj.offsetLeft;
obj=obj.offsetParent;
}
}else{
if(obj.x){
_32+=obj.x;
}
}
return _32;
},findPosY:function(obj){
var _33=0;
if(obj.offsetParent){
while(obj.offsetParent){
_33+=obj.offsetTop;
obj=obj.offsetParent;
}
}else{
if(obj.y){
_33+=obj.y;
}
}
return _33;
},isFuncLike:function(obj){
return (typeof (obj)=="function");
}});
PlotKit.Base.map=function(fn,lst){
if(PlotKit.Base.usingPrototype()){
var _36=[];
for(var x in lst){
if(typeof (lst[x])=="function"){
continue;
}
_36.push(fn(lst[x]));
}
return _36;
}else{
return MochiKit.Base.map(fn,lst);
}
};
PlotKit.Base.items=function(lst){
if(PlotKit.Base.usingPrototype()){
var _38=[];
for(var x in lst){
if(typeof (lst[x])=="function"){
continue;
}
_38.push([x,lst[x]]);
}
return _38;
}else{
return MochiKit.Base.items(lst);
}
};
PlotKit.Base.keys=function(lst){
if(PlotKit.Base.usingPrototype()){
var _39=[];
for(var x in lst){
if(typeof (lst[x])=="function"){
continue;
}
_39.push(x);
}
return _39;
}else{
return MochiKit.Base.keys(lst);
}
};
PlotKit.Base.baseColors=function(){
var _40=MochiKit.Color.Color.fromHexString;
return [_40("#476fb2"),_40("#be2c2b"),_40("#85b730"),_40("#734a99"),_40("#26a1c5"),_40("#fb8707"),_40("#000000")];
};
PlotKit.Base.officeBaseStyle={"axisLineWidth":2,"axisLabelColor":Color.grayColor(),"axisLineColor":Color.whiteColor(),"padding":{top:5,bottom:10,left:30,right:30}};
MochiKit.Base.update(PlotKit.Base,{officeBlue:function(){
var r={"colorScheme":PlotKit.Base.palette(PlotKit.Base.baseColors()[0]),"backgroundColor":PlotKit.Base.baseColors()[0].lighterColorWithLevel(0.45)};
MochiKit.Base.update(r,PlotKit.Base.officeBaseStyle);
return r;
},officeRed:function(){
var r={"colorScheme":PlotKit.Base.palette(PlotKit.Base.baseColors()[1]),"backgroundColor":PlotKit.Base.baseColors()[1].lighterColorWithLevel(0.5)};
MochiKit.Base.update(r,PlotKit.Base.officeBaseStyle);
return r;
},officeGreen:function(){
var r={"colorScheme":PlotKit.Base.palette(PlotKit.Base.baseColors()[2]),"backgroundColor":PlotKit.Base.baseColors()[2].lighterColorWithLevel(0.5)};
MochiKit.Base.update(r,PlotKit.Base.officeBaseStyle);
return r;
},officePurple:function(){
var r={"colorScheme":PlotKit.Base.palette(PlotKit.Base.baseColors()[3]),"backgroundColor":PlotKit.Base.baseColors()[3].lighterColorWithLevel(0.5)};
MochiKit.Base.update(r,PlotKit.Base.officeBaseStyle);
return r;
},officeCyan:function(){
var r={"colorScheme":PlotKit.Base.palette(PlotKit.Base.baseColors()[4]),"backgroundColor":PlotKit.Base.baseColors()[4].lighterColorWithLevel(0.5)};
MochiKit.Base.update(r,PlotKit.Base.officeBaseStyle);
return r;
},officeOrange:function(){
var r={"colorScheme":PlotKit.Base.palette(PlotKit.Base.baseColors()[5]),"backgroundColor":PlotKit.Base.baseColors()[5].lighterColorWithLevel(0.4)};
MochiKit.Base.update(r,PlotKit.Base.officeBaseStyle);
return r;
},officeBlack:function(){
var r={"colorScheme":PlotKit.Base.palette(PlotKit.Base.baseColors()[6],0,0.6),"backgroundColor":PlotKit.Base.baseColors()[6].lighterColorWithLevel(0.9)};
MochiKit.Base.update(r,PlotKit.Base.officeBaseStyle);
return r;
}});
PlotKit.Base.EXPORT=["baseColors","collapse","colorScheme","findPosX","findPosY","officeBaseStyle","officeBlue","officeRed","officeGreen","officePurple","officeCyan","officeOrange","officeBlack","roundInterval","uniq","isFuncLike","excanvasSupported"];
PlotKit.Base.EXPORT_OK=[];
PlotKit.Base.__new__=function(){
var m=MochiKit.Base;
m.nameFunctions(this);
this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
};
PlotKit.Base.__new__();
MochiKit.Base._exportSymbols(this,PlotKit.Base);
try{
if(typeof (PlotKit.Base)=="undefined"){
throw "";
}
}
catch(e){
throw "PlotKit.Layout depends on MochiKit.{Base,Color,DOM,Format} and PlotKit.Base";
}
if(typeof (PlotKit.Layout)=="undefined"){
PlotKit.Layout={};
}
PlotKit.Layout.NAME="PlotKit.Layout";
PlotKit.Layout.VERSION=PlotKit.VERSION;
PlotKit.Layout.__repr__=function(){
return "["+this.NAME+" "+this.VERSION+"]";
};
PlotKit.Layout.toString=function(){
return this.__repr__();
};
PlotKit.Layout.valid_styles=["bar","line","pie","point"];
PlotKit.Layout=function(_42,_43){
this.options={"barWidthFillFraction":0.75,"barOrientation":"vertical","xOriginIsZero":true,"yOriginIsZero":true,"xAxis":null,"yAxis":null,"xTicks":null,"yTicks":null,"xNumberOfTicks":10,"yNumberOfTicks":5,"xTickPrecision":1,"yTickPrecision":1,"pieRadius":0.4};
this.style=_42;
MochiKit.Base.update(this.options,_43?_43:{});
if(!MochiKit.Base.isUndefinedOrNull(this.options.xAxis)){
this.minxval=this.options.xAxis[0];
this.maxxval=this.options.xAxis[1];
this.xscale=this.maxxval-this.minxval;
}else{
this.minxval=0;
this.maxxval=null;
this.xscale=null;
}
if(!MochiKit.Base.isUndefinedOrNull(this.options.yAxis)){
this.minyval=this.options.yAxis[0];
this.maxyval=this.options.yAxis[1];
this.yscale=this.maxyval-this.minyval;
}else{
this.minyval=0;
this.maxyval=null;
this.yscale=null;
}
this.bars=new Array();
this.points=new Array();
this.slices=new Array();
this.xticks=new Array();
this.yticks=new Array();
this.datasets=new Array();
this.minxdelta=0;
this.xrange=1;
this.yrange=1;
this.hitTestCache={x2maxy:null};
};
PlotKit.Layout.prototype.addDataset=function(_44,_45){
this.datasets[_44]=_45;
};
PlotKit.Layout.prototype.removeDataset=function(_46,_47){
delete this.datasets[_46];
};
PlotKit.Layout.prototype.addDatasetFromTable=function(_48,_49,_50,_51,_52){
var _53=MochiKit.Base.isUndefinedOrNull;
var _54=MochiKit.DOM.scrapeText;
var _55=MochiKit.Format.strip;
if(_53(_50)){
_50=0;
}
if(_53(_51)){
_51=1;
}
if(_53(_52)){
_52=-1;
}
var _56=_49.tBodies[0].rows;
var _57=new Array();
var _58=new Array();
if(!_53(_56)){
for(var i=0;i<_56.length;i++){
_57.push([parseFloat(_55(_54(_56[i].cells[_50]))),parseFloat(_55(_54(_56[i].cells[_51])))]);
if(_52>=0){
_58.push({v:parseFloat(_55(_54(_56[i].cells[_50]))),label:_55(_54(_56[i].cells[_52]))});
}
}
this.addDataset(_48,_57);
if(_52>=0){
this.options.xTicks=_58;
}
return true;
}
return false;
};
PlotKit.Layout.prototype.evaluate=function(){
this._evaluateLimits();
this._evaluateScales();
if(this.style=="bar"){
if(this.options.barOrientation=="horizontal"){
this._evaluateHorizBarCharts();
}else{
this._evaluateBarCharts();
}
this._evaluateBarTicks();
}else{
if(this.style=="line"){
this._evaluateLineCharts();
this._evaluateLineTicks();
}else{
if(this.style=="pie"){
this._evaluatePieCharts();
this._evaluatePieTicks();
}
}
}
};
PlotKit.Layout.prototype.hitTest=function(x,y){
var f=MochiKit.Format.twoDigitFloat;
if((this.style=="bar")&&this.bars&&(this.bars.length>0)){
for(var i=0;i<this.bars.length;i++){
var bar=this.bars[i];
if((x>=bar.x)&&(x<=bar.x+bar.w)&&(y>=bar.y)&&(y-bar.y<=bar.h)){
return bar;
}
}
}else{
if(this.style=="line"){
if(this.hitTestCache.x2maxy==null){
this._regenerateHitTestCache();
}
var _62=x/this.xscale;
var _63=this.hitTestCache.xvalues;
var _64=null;
var _65=null;
for(var i=1;i<_63.length;i++){
if(_63[i]>_62){
_64=_63[i-1];
_65=_63[i];
break;
}
}
if((_64!=null)){
var _66=this.hitTestCache.x2maxy[_64];
var _67=this.hitTestCache.x2maxy[_65];
var _68=(1-y)/this.yscale;
var _69=(_67-_66)/(_65-_64);
var _70=_66+_69*(_62-_64);
if(_70>=_68){
var obj={xval:_62,yval:_68,xafter:_65,yafter:_67,xbefore:_64,ybefore:_66,yprojected:_70};
return obj;
}
}
}else{
if(this.style=="pie"){
var _71=Math.sqrt((y-0.5)*(y-0.5)+(x-0.5)*(x-0.5));
if(_71>this.options.pieRadius){
return null;
}
var _72=Math.atan2(y-0.5,x-0.5)-Math.PI/2;
for(var i=0;i<this.slices.length;i++){
var _73=this.slices[i];
if(_73.startAngle<_72&&_73.endAngle>=_72){
return _73;
}
}
}
}
}
return null;
};
PlotKit.Layout.prototype.rectForX=function(x){
return null;
};
PlotKit.Layout.prototype.angleRangeForX=function(x){
return null;
};
PlotKit.Layout.prototype._evaluateLimits=function(){
var map=PlotKit.Base.map;
var _75=PlotKit.Base.items;
var _76=MochiKit.Base.itemgetter;
var _77=PlotKit.Base.collapse;
var _78=MochiKit.Base.listMin;
var _79=MochiKit.Base.listMax;
var _80=MochiKit.Base.isUndefinedOrNull;
var all=_77(map(_76(1),_75(this.datasets)));
if(_80(this.options.xAxis)){
if(this.options.xOriginIsZero){
this.minxval=0;
}else{
this.minxval=_78(map(parseFloat,map(_76(0),all)));
}
this.maxxval=_79(map(parseFloat,map(_76(0),all)));
}else{
this.minxval=this.options.xAxis[0];
this.maxxval=this.options.xAxis[1];
this.xscale=this.maxval-this.minxval;
}
if(_80(this.options.yAxis)){
if(this.options.yOriginIsZero){
this.minyval=0;
}else{
this.minyval=_78(map(parseFloat,map(_76(1),all)));
}
this.maxyval=_79(map(parseFloat,map(_76(1),all)));
}else{
this.minyval=this.options.yAxis[0];
this.maxyval=this.options.yAxis[1];
this.yscale=this.maxyval-this.minyval;
}
};
PlotKit.Layout.prototype._evaluateScales=function(){
var _82=MochiKit.Base.isUndefinedOrNull;
this.xrange=this.maxxval-this.minxval;
if(this.xrange==0){
this.xscale=1;
}else{
this.xscale=1/this.xrange;
}
this.yrange=this.maxyval-this.minyval;
if(this.yrange==0){
this.yscale=1;
}else{
this.yscale=1/this.yrange;
}
};
PlotKit.Layout.prototype._uniqueXValues=function(){
var _83=PlotKit.Base.collapse;
var map=PlotKit.Base.map;
var _84=PlotKit.Base.uniq;
var _85=MochiKit.Base.itemgetter;
var _86=PlotKit.Base.items;
var _87=map(parseFloat,map(_85(0),_83(map(_85(1),_86(this.datasets)))));
_87.sort(MochiKit.Base.compare);
return _84(_87);
};
PlotKit.Layout.prototype._evaluateBarCharts=function(){
var _88=PlotKit.Base.items;
var _89=_88(this.datasets).length;
var _90=10000000;
var _91=this._uniqueXValues();
for(var i=1;i<_91.length;i++){
_90=Math.min(Math.abs(_91[i]-_91[i-1]),_90);
}
var _92=0;
var _93=0;
var _94=0;
if(_91.length==1){
_90=1;
this.xscale=1;
this.minxval=_91[0];
_92=1*this.options.barWidthFillFraction;
_93=_92/_89;
_94=(1-this.options.barWidthFillFraction)/2;
}else{
if(this.xrange==1){
this.xscale=0.5;
}else{
if(this.xrange==2){
this.xscale=1/3;
}else{
this.xscale=(1-_90/this.xrange)/this.xrange;
}
}
_92=_90*this.xscale*this.options.barWidthFillFraction;
_93=_92/_89;
_94=_90*this.xscale*(1-this.options.barWidthFillFraction)/2;
}
this.minxdelta=_90;
this.bars=new Array();
var i=0;
for(var _95 in this.datasets){
var _96=this.datasets[_95];
if(PlotKit.Base.isFuncLike(_96)){
continue;
}
for(var j=0;j<_96.length;j++){
var _98=_96[j];
var _99={x:((parseFloat(_98[0])-this.minxval)*this.xscale)+(i*_93)+_94,y:1-((parseFloat(_98[1])-this.minyval)*this.yscale),w:_93,h:((parseFloat(_98[1])-this.minyval)*this.yscale),xval:parseFloat(_98[0]),yval:parseFloat(_98[1]),name:_95};
if((_99.x>=0)&&(_99.x<=1)&&(_99.y>=0)&&(_99.y<=1)){
this.bars.push(_99);
}
}
i++;
}
};
PlotKit.Layout.prototype._evaluateHorizBarCharts=function(){
var _100=PlotKit.Base.items;
var _101=_100(this.datasets).length;
var _102=10000000;
var _103=this._uniqueXValues();
for(var i=1;i<_103.length;i++){
_102=Math.min(Math.abs(_103[i]-_103[i-1]),_102);
}
var _104=0;
var _105=0;
var _106=0;
if(_103.length==1){
_102=1;
this.xscale=1;
this.minxval=_103[0];
_104=1*this.options.barWidthFillFraction;
_105=_104/_101;
_106=(1-this.options.barWidthFillFraction)/2;
}else{
this.xscale=(1-_102/this.xrange)/this.xrange;
_104=_102*this.xscale*this.options.barWidthFillFraction;
_105=_104/_101;
_106=_102*this.xscale*(1-this.options.barWidthFillFraction)/2;
}
this.minxdelta=_102;
this.bars=new Array();
var i=0;
for(var _107 in this.datasets){
var _108=this.datasets[_107];
if(PlotKit.Base.isFuncLike(_108)){
continue;
}
for(var j=0;j<_108.length;j++){
var item=_108[j];
var rect={y:((parseFloat(item[0])-this.minxval)*this.xscale)+(i*_105)+_106,x:0,h:_105,w:((parseFloat(item[1])-this.minyval)*this.yscale),xval:parseFloat(item[0]),yval:parseFloat(item[1]),name:_107};
if(rect.y<=0){
rect.y=0;
}
if(rect.y>=1){
rect.y=1;
}
if((rect.x>=0)&&(rect.x<=1)){
this.bars.push(rect);
}
}
i++;
}
};
PlotKit.Layout.prototype._evaluateLineCharts=function(){
var _111=PlotKit.Base.items;
var _112=_111(this.datasets).length;
this.points=new Array();
var i=0;
for(var _113 in this.datasets){
var _114=this.datasets[_113];
if(PlotKit.Base.isFuncLike(_114)){
continue;
}
_114.sort(function(a,b){
return compare(parseFloat(a[0]),parseFloat(b[0]));
});
for(var j=0;j<_114.length;j++){
var item=_114[j];
var _117={x:((parseFloat(item[0])-this.minxval)*this.xscale),y:1-((parseFloat(item[1])-this.minyval)*this.yscale),xval:parseFloat(item[0]),yval:parseFloat(item[1]),name:_113};
if(_117.y<=0){
_117.y=0;
}
if(_117.y>=1){
_117.y=1;
}
if((_117.x>=0)&&(_117.x<=1)){
this.points.push(_117);
}
}
i++;
}
};
PlotKit.Layout.prototype._evaluatePieCharts=function(){
var _118=PlotKit.Base.items;
var sum=MochiKit.Iter.sum;
var _120=MochiKit.Base.itemgetter;
var _121=_118(this.datasets).length;
var _122=_118(this.datasets)[0][1];
var _123=sum(map(_120(1),_122));
this.slices=new Array();
var _124=0;
for(var i=0;i<_122.length;i++){
var _125=_122[i][1]/_123;
var _126=_124*Math.PI*2;
var _127=(_124+_125)*Math.PI*2;
var _128={fraction:_125,xval:_122[i][0],yval:_122[i][1],startAngle:_126,endAngle:_127};
if(_122[i][1]!=0){
this.slices.push(_128);
}
_124+=_125;
}
};
PlotKit.Layout.prototype._evaluateLineTicksForXAxis=function(){
var _129=MochiKit.Base.isUndefinedOrNull;
if(this.options.xTicks){
this.xticks=new Array();
var _130=function(tick){
var _132=tick.label;
if(_129(_132)){
_132=tick.v.toString();
}
var pos=this.xscale*(tick.v-this.minxval);
if((pos>=0)&&(pos<=1)){
this.xticks.push([pos,_132]);
}
};
MochiKit.Iter.forEach(this.options.xTicks,bind(_130,this));
}else{
if(this.options.xNumberOfTicks){
var _134=this._uniqueXValues();
var _135=this.xrange/this.options.xNumberOfTicks;
var _136=0;
this.xticks=new Array();
for(var i=0;i<=_134.length;i++){
if((_134[i]-this.minxval)>=(_136*_135)){
var pos=this.xscale*(_134[i]-this.minxval);
if((pos>1)||(pos<0)){
continue;
}
this.xticks.push([pos,_134[i]]);
_136++;
}
if(_136>this.options.xNumberOfTicks){
break;
}
}
}
}
};
PlotKit.Layout.prototype._evaluateLineTicksForYAxis=function(){
var _137=MochiKit.Base.isUndefinedOrNull;
if(this.options.yTicks){
this.yticks=new Array();
var _138=function(tick){
var _139=tick.label;
if(_137(_139)){
_139=tick.v.toString();
}
var pos=1-(this.yscale*(tick.v-this.minyval));
if((pos>=0)&&(pos<=1)){
this.yticks.push([pos,_139]);
}
};
MochiKit.Iter.forEach(this.options.yTicks,bind(_138,this));
}else{
if(this.options.yNumberOfTicks){
this.yticks=new Array();
var _140=PlotKit.Base.roundInterval;
var prec=this.options.yTickPrecision;
var _142=_140(this.yrange,this.options.yNumberOfTicks,prec);
for(var i=0;i<=this.options.yNumberOfTicks;i++){
var yval=this.minyval+(i*_142);
var pos=1-((yval-this.minyval)*this.yscale);
if((pos>1)||(pos<0)){
continue;
}
this.yticks.push([pos,MochiKit.Format.roundToFixed(yval,prec)]);
}
}
}
};
PlotKit.Layout.prototype._evaluateLineTicks=function(){
this._evaluateLineTicksForXAxis();
this._evaluateLineTicksForYAxis();
};
PlotKit.Layout.prototype._evaluateBarTicks=function(){
this._evaluateLineTicks();
var _144=function(tick){
return [tick[0]+(this.minxdelta*this.xscale)/2,tick[1]];
};
this.xticks=MochiKit.Base.map(bind(_144,this),this.xticks);
if(this.options.barOrientation=="horizontal"){
var _145=this.xticks;
this.xticks=this.yticks;
this.yticks=_145;
var _146=function(tick){
return [1-tick[0],tick[1]];
};
this.xticks=MochiKit.Base.map(_146,this.xticks);
}
};
PlotKit.Layout.prototype._evaluatePieTicks=function(){
var _147=MochiKit.Base.isUndefinedOrNull;
var _148=MochiKit.Format.numberFormatter("#%");
this.xticks=new Array();
if(this.options.xTicks){
var _149=new Array();
for(var i=0;i<this.slices.length;i++){
_149[this.slices[i].xval]=this.slices[i];
}
for(var i=0;i<this.options.xTicks.length;i++){
var tick=this.options.xTicks[i];
var _150=_149[tick.v];
var _151=tick.label;
if(_150){
if(_147(_151)){
_151=tick.v.toString();
}
_151+=" ("+_148(_150.fraction)+")";
this.xticks.push([tick.v,_151]);
}
}
}else{
for(var i=0;i<this.slices.length;i++){
var _150=this.slices[i];
var _151=_150.xval+" ("+_148(_150.fraction)+")";
this.xticks.push([_150.xval,_151]);
}
}
};
PlotKit.Layout.prototype._regenerateHitTestCache=function(){
this.hitTestCache.xvalues=this._uniqueXValues();
this.hitTestCache.xlookup=new Array();
this.hitTestCache.x2maxy=new Array();
var _152=MochiKit.Base.listMax;
var _153=MochiKit.Base.itemgetter;
var map=MochiKit.Base.map;
var _154=keys(this.datasets);
for(var i=0;i<_154.length;i++){
var _155=this.datasets[_154[i]];
for(var j=0;j<_155.length;j++){
var xval=_155[j][0];
var yval=_155[j][1];
if(this.hitTestCache.xlookup[xval]){
this.hitTestCache.xlookup[xval].push([yval,_154[i]]);
}else{
this.hitTestCache.xlookup[xval]=[[yval,_154[i]]];
}
}
}
for(var x in this.hitTestCache.xlookup){
var _157=this.hitTestCache.xlookup[x];
this.hitTestCache.x2maxy[x]=_152(map(_153(0),_157));
}
};
PlotKit.LayoutModule={};
PlotKit.LayoutModule.Layout=PlotKit.Layout;
PlotKit.LayoutModule.EXPORT=["Layout"];
PlotKit.LayoutModule.EXPORT_OK=[];
PlotKit.LayoutModule.__new__=function(){
var m=MochiKit.Base;
m.nameFunctions(this);
this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
};
PlotKit.LayoutModule.__new__();
MochiKit.Base._exportSymbols(this,PlotKit.LayoutModule);
try{
if((typeof (PlotKit.Base)=="undefined")||(typeof (PlotKit.Layout)=="undefined")){
throw "";
}
}
catch(e){
throw "PlotKit.Layout depends on MochiKit.{Base,Color,DOM,Format} and PlotKit.{Base,Layout}";
}
if(typeof (PlotKit.CanvasRenderer)=="undefined"){
PlotKit.CanvasRenderer={};
}
PlotKit.CanvasRenderer.NAME="PlotKit.CanvasRenderer";
PlotKit.CanvasRenderer.VERSION=PlotKit.VERSION;
PlotKit.CanvasRenderer.__repr__=function(){
return "["+this.NAME+" "+this.VERSION+"]";
};
PlotKit.CanvasRenderer.toString=function(){
return this.__repr__();
};
PlotKit.CanvasRenderer=function(_158,_159,_160){
if(arguments.length>0){
this.__init__(_158,_159,_160);
}
};
PlotKit.CanvasRenderer.prototype.__init__=function(_161,_162,_163){
var _164=MochiKit.Base.isUndefinedOrNull;
var _165=MochiKit.Color.Color;
this.options={"drawBackground":true,"backgroundColor":_165.whiteColor(),"padding":{left:30,right:30,top:5,bottom:10},"colorScheme":PlotKit.Base.palette(PlotKit.Base.baseColors()[0]),"strokeColor":_165.whiteColor(),"strokeColorTransform":"asStrokeColor","strokeWidth":0.5,"shouldFill":true,"shouldStroke":true,"drawXAxis":true,"drawYAxis":true,"axisLineColor":_165.blackColor(),"axisLineWidth":0.5,"axisTickSize":3,"axisLabelColor":_165.blackColor(),"axisLabelFont":"Arial","axisLabelFontSize":9,"axisLabelWidth":50,"pieRadius":0.4,"enableEvents":true};
MochiKit.Base.update(this.options,_163?_163:{});
this.layout=_162;
this.element=MochiKit.DOM.getElement(_161);
this.container=this.element.parentNode;
this.isIE=PlotKit.Base.excanvasSupported();
if(this.isIE&&!_164(G_vmlCanvasManager)){
this.IEDelay=0.5;
this.maxTries=5;
this.renderDelay=null;
this.clearDelay=null;
this.element=G_vmlCanvasManager.initElement(this.element);
}
this.height=this.element.height;
this.width=this.element.width;
if(_164(this.element)){
throw "CanvasRenderer() - passed canvas is not found";
}
if(!this.isIE&&!(PlotKit.CanvasRenderer.isSupported(this.element))){
throw "CanvasRenderer() - Canvas is not supported.";
}
if(_164(this.container)||(this.container.nodeName.toLowerCase()!="div")){
throw "CanvasRenderer() - <canvas> needs to be enclosed in <div>";
}
this.xlabels=new Array();
this.ylabels=new Array();
this.isFirstRender=true;
this.area={x:this.options.padding.left,y:this.options.padding.top,w:this.width-this.options.padding.left-this.options.padding.right,h:this.height-this.options.padding.top-this.options.padding.bottom};
MochiKit.DOM.updateNodeAttributes(this.container,{"style":{"position":"relative","width":this.width+"px"}});
};
PlotKit.CanvasRenderer.prototype.render=function(){
if(this.isIE){
try{
if(this.renderDelay){
this.renderDelay.cancel();
this.renderDelay=null;
}
var _166=this.element.getContext("2d");
}
catch(e){
this.isFirstRender=false;
if(this.maxTries-->0){
this.renderDelay=MochiKit.Async.wait(this.IEDelay);
this.renderDelay.addCallback(bind(this.render,this));
}
return;
}
}
if(this.options.drawBackground){
this._renderBackground();
}
if(this.layout.style=="bar"){
this._renderBarChart();
this._renderBarAxis();
}else{
if(this.layout.style=="pie"){
this._renderPieChart();
this._renderPieAxis();
}else{
if(this.layout.style=="line"){
this._renderLineChart();
this._renderLineAxis();
}
}
}
};
PlotKit.CanvasRenderer.prototype._renderBarChartWrap=function(data,_168){
var _169=this.element.getContext("2d");
var _170=this.options.colorScheme.length;
var _171=this.options.colorScheme;
var _172=MochiKit.Base.keys(this.layout.datasets);
var _173=_172.length;
for(var i=0;i<_173;i++){
var _174=_172[i];
var _175=_171[i%_170];
_169.save();
_169.fillStyle=_175.toRGBString();
if(this.options.strokeColor){
_169.strokeStyle=this.options.strokeColor.toRGBString();
}else{
if(this.options.strokeColorTransform){
_169.strokeStyle=_175[this.options.strokeColorTransform]().toRGBString();
}
}
_169.lineWidth=this.options.strokeWidth;
var _176=function(obj){
if(obj.name==_174){
_168(_169,obj);
}
};
MochiKit.Iter.forEach(data,bind(_176,this));
_169.restore();
}
};
PlotKit.CanvasRenderer.prototype._renderBarChart=function(){
var bind=MochiKit.Base.bind;
var _178=function(_179,bar){
var x=this.area.w*bar.x+this.area.x;
var y=this.area.h*bar.y+this.area.y;
var w=this.area.w*bar.w;
var h=this.area.h*bar.h;
if((w<1)||(h<1)){
return;
}
if(this.options.shouldFill){
_179.fillRect(x,y,w,h);
}
if(this.options.shouldStroke){
_179.strokeRect(x,y,w,h);
}
};
this._renderBarChartWrap(this.layout.bars,bind(_178,this));
};
PlotKit.CanvasRenderer.prototype._renderLineChart=function(){
var _182=this.element.getContext("2d");
var _183=this.options.colorScheme.length;
var _184=this.options.colorScheme;
var _185=MochiKit.Base.keys(this.layout.datasets);
var _186=_185.length;
var bind=MochiKit.Base.bind;
var _187=MochiKit.Base.partial;
for(var i=0;i<_186;i++){
var _188=_185[i];
var _189=_184[i%_183];
var _190=this.options.strokeColorTransform;
_182.save();
_182.fillStyle=_189.toRGBString();
if(this.options.strokeColor){
_182.strokeStyle=this.options.strokeColor.toRGBString();
}else{
if(this.options.strokeColorTransform){
_182.strokeStyle=_189[_190]().toRGBString();
}
}
_182.lineWidth=this.options.strokeWidth;
var _191=function(ctx){
ctx.beginPath();
ctx.moveTo(this.area.x,this.area.y+this.area.h);
var _193=function(ctx_,_195){
if(_195.name==_188){
ctx_.lineTo(this.area.w*_195.x+this.area.x,this.area.h*_195.y+this.area.y);
}
};
MochiKit.Iter.forEach(this.layout.points,_187(_193,ctx),this);
ctx.lineTo(this.area.w+this.area.x,this.area.h+this.area.y);
ctx.lineTo(this.area.x,this.area.y+this.area.h);
ctx.closePath();
};
if(this.options.shouldFill){
bind(_191,this)(_182);
_182.fill();
}
if(this.options.shouldStroke){
bind(_191,this)(_182);
_182.stroke();
}
_182.restore();
}
};
PlotKit.CanvasRenderer.prototype._renderPieChart=function(){
var _196=this.element.getContext("2d");
var _197=this.options.colorScheme.length;
var _198=this.layout.slices;
var _199=this.area.x+this.area.w*0.5;
var _200=this.area.y+this.area.h*0.5;
var _201=Math.min(this.area.w*this.options.pieRadius,this.area.h*this.options.pieRadius);
if(this.isIE){
_199=parseInt(_199);
_200=parseInt(_200);
_201=parseInt(_201);
}
for(var i=0;i<_198.length;i++){
var _202=this.options.colorScheme[i%_197];
_196.save();
_196.fillStyle=_202.toRGBString();
var _203=function(){
_196.beginPath();
_196.moveTo(_199,_200);
_196.arc(_199,_200,_201,_198[i].startAngle-Math.PI/2,_198[i].endAngle-Math.PI/2,false);
_196.lineTo(_199,_200);
_196.closePath();
};
if(Math.abs(_198[i].startAngle-_198[i].endAngle)>0.001){
if(this.options.shouldFill){
_203();
_196.fill();
}
if(this.options.shouldStroke){
_203();
_196.lineWidth=this.options.strokeWidth;
if(this.options.strokeColor){
_196.strokeStyle=this.options.strokeColor.toRGBString();
}else{
if(this.options.strokeColorTransform){
_196.strokeStyle=_202[this.options.strokeColorTransform]().toRGBString();
}
}
_196.stroke();
}
}
_196.restore();
}
};
PlotKit.CanvasRenderer.prototype._renderBarAxis=function(){
this._renderAxis();
};
PlotKit.CanvasRenderer.prototype._renderLineAxis=function(){
this._renderAxis();
};
PlotKit.CanvasRenderer.prototype._renderAxis=function(){
if(!this.options.drawXAxis&&!this.options.drawYAxis){
return;
}
var _204=this.element.getContext("2d");
var _205={"style":{"position":"absolute","fontSize":this.options.axisLabelFontSize+"px","zIndex":10,"color":this.options.axisLabelColor.toRGBString(),"width":this.options.axisLabelWidth+"px","overflow":"hidden"}};
_204.save();
_204.strokeStyle=this.options.axisLineColor.toRGBString();
_204.lineWidth=this.options.axisLineWidth;
if(this.options.drawYAxis){
if(this.layout.yticks){
var _206=function(tick){
if(typeof (tick)=="function"){
return;
}
var x=this.area.x;
var y=this.area.y+tick[0]*this.area.h;
_204.beginPath();
_204.moveTo(x,y);
_204.lineTo(x-this.options.axisTickSize,y);
_204.closePath();
_204.stroke();
var _207=DIV(_205,tick[1]);
_207.style.top=(y-this.options.axisLabelFontSize)+"px";
_207.style.left=(x-this.options.padding.left-this.options.axisTickSize)+"px";
_207.style.textAlign="right";
_207.style.width=(this.options.padding.left-this.options.axisTickSize*2)+"px";
MochiKit.DOM.appendChildNodes(this.container,_207);
this.ylabels.push(_207);
};
MochiKit.Iter.forEach(this.layout.yticks,bind(_206,this));
}
_204.beginPath();
_204.moveTo(this.area.x,this.area.y);
_204.lineTo(this.area.x,this.area.y+this.area.h);
_204.closePath();
_204.stroke();
}
if(this.options.drawXAxis){
if(this.layout.xticks){
var _206=function(tick){
if(typeof (dataset)=="function"){
return;
}
var x=this.area.x+tick[0]*this.area.w;
var y=this.area.y+this.area.h;
_204.beginPath();
_204.moveTo(x,y);
_204.lineTo(x,y+this.options.axisTickSize);
_204.closePath();
_204.stroke();
var _208=DIV(_205,tick[1]);
_208.style.top=(y+this.options.axisTickSize)+"px";
_208.style.left=(x-this.options.axisLabelWidth/2)+"px";
_208.style.textAlign="center";
_208.style.width=this.options.axisLabelWidth+"px";
MochiKit.DOM.appendChildNodes(this.container,_208);
this.xlabels.push(_208);
};
MochiKit.Iter.forEach(this.layout.xticks,bind(_206,this));
}
_204.beginPath();
_204.moveTo(this.area.x,this.area.y+this.area.h);
_204.lineTo(this.area.x+this.area.w,this.area.y+this.area.h);
_204.closePath();
_204.stroke();
}
_204.restore();
};
PlotKit.CanvasRenderer.prototype._renderPieAxis=function(){
if(!this.options.drawXAxis){
return;
}
if(this.layout.xticks){
var _209=new Array();
for(var i=0;i<this.layout.slices.length;i++){
_209[this.layout.slices[i].xval]=this.layout.slices[i];
}
var _210=this.area.x+this.area.w*0.5;
var _211=this.area.y+this.area.h*0.5;
var _212=Math.min(this.area.w*this.options.pieRadius,this.area.h*this.options.pieRadius);
var _213=this.options.axisLabelWidth;
for(var i=0;i<this.layout.xticks.length;i++){
var _214=_209[this.layout.xticks[i][0]];
if(MochiKit.Base.isUndefinedOrNull(_214)){
continue;
}
var _215=(_214.startAngle+_214.endAngle)/2;
var _216=_215;
if(_216>Math.PI*2){
_216=_216-Math.PI*2;
}else{
if(_216<0){
_216=_216+Math.PI*2;
}
}
var _217=_210+Math.sin(_216)*(_212+10);
var _218=_211-Math.cos(_216)*(_212+10);
var _219={"position":"absolute","zIndex":11,"width":_213+"px","fontSize":this.options.axisLabelFontSize+"px","overflow":"hidden","color":this.options.axisLabelColor.toHexString()};
if(_216<=Math.PI*0.5){
_219["textAlign"]="left";
_219["verticalAlign"]="top";
_219["left"]=_217+"px";
_219["top"]=(_218-this.options.axisLabelFontSize)+"px";
}else{
if((_216>Math.PI*0.5)&&(_216<=Math.PI)){
_219["textAlign"]="left";
_219["verticalAlign"]="bottom";
_219["left"]=_217+"px";
_219["top"]=_218+"px";
}else{
if((_216>Math.PI)&&(_216<=Math.PI*1.5)){
_219["textAlign"]="right";
_219["verticalAlign"]="bottom";
_219["left"]=(_217-_213)+"px";
_219["top"]=_218+"px";
}else{
_219["textAlign"]="right";
_219["verticalAlign"]="bottom";
_219["left"]=(_217-_213)+"px";
_219["top"]=(_218-this.options.axisLabelFontSize)+"px";
}
}
}
var _220=DIV({"style":_219},this.layout.xticks[i][1]);
this.xlabels.push(_220);
MochiKit.DOM.appendChildNodes(this.container,_220);
}
}
};
PlotKit.CanvasRenderer.prototype._renderBackground=function(){
var _221=this.element.getContext("2d");
_221.save();
_221.fillStyle=this.options.backgroundColor.toRGBString();
_221.fillRect(0,0,this.width,this.height);
_221.restore();
};
PlotKit.CanvasRenderer.prototype.clear=function(){
if(this.isIE){
try{
if(this.clearDelay){
this.clearDelay.cancel();
this.clearDelay=null;
}
var _222=this.element.getContext("2d");
}
catch(e){
this.isFirstRender=false;
this.clearDelay=MochiKit.Async.wait(this.IEDelay);
this.clearDelay.addCallback(bind(this.clear,this));
return;
}
}
var _222=this.element.getContext("2d");
_222.clearRect(0,0,this.width,this.height);
MochiKit.Iter.forEach(this.xlabels,MochiKit.DOM.removeElement);
MochiKit.Iter.forEach(this.ylabels,MochiKit.DOM.removeElement);
this.xlabels=new Array();
this.ylabels=new Array();
};
PlotKit.CanvasRenderer.prototype._initialiseEvents=function(){
var _223=MochiKit.Signal.connect;
var bind=MochiKit.Base.bind;
_223(this.element,"onclick",bind(this.onclick,this));
};
PlotKit.CanvasRenderer.prototype._resolveObject=function(e){
var x=(e.mouse().page.x-PlotKit.Base.findPosX(this.element)-this.area.x)/this.area.w;
var y=(e.mouse().page.y-PlotKit.Base.findPosY(this.element)-this.area.y)/this.area.h;
var _225=this.layout.hitTest(x,y);
if(_225){
return _225;
}
return null;
};
PlotKit.CanvasRenderer.prototype._createEventObject=function(_226,e){
if(_226==null){
return null;
}
e.chart=_226;
return e;
};
PlotKit.CanvasRenderer.prototype.onclick=function(e){
var _227=this._resolveObject(e);
var _228=this._createEventObject(_227,e);
if(_228!=null){
MochiKit.Signal.signal(this,"onclick",_228);
}
};
PlotKit.CanvasRenderer.prototype.onmouseover=function(e){
var _229=this._resolveObject(e);
var _230=this._createEventObject(_229,e);
if(_230!=null){
signal(this,"onmouseover",_230);
}
};
PlotKit.CanvasRenderer.prototype.onmouseout=function(e){
var _231=this._resolveObject(e);
var _232=this._createEventObject(_231,e);
if(_232==null){
signal(this,"onmouseout",e);
}else{
signal(this,"onmouseout",_232);
}
};
PlotKit.CanvasRenderer.prototype.onmousemove=function(e){
var _233=this._resolveObject(e);
var _234=this._createEventObject(_233,e);
if((_233==null)&&(this.event_isinside==null)){
return;
}
if((_233!=null)&&(this.event_isinside==null)){
signal(this,"onmouseover",_234);
}
if((_233==null)&&(this.event_isinside!=null)){
signal(this,"onmouseout",_234);
}
if((_233!=null)&&(this.event_isinside!=null)){
signal(this,"onmousemove",_234);
}
this.event_isinside=_233;
};
PlotKit.CanvasRenderer.isSupported=function(_235){
var _236=null;
try{
if(MochiKit.Base.isUndefinedOrNull(_235)){
_236=MochiKit.DOM.CANVAS({});
}else{
_236=MochiKit.DOM.getElement(_235);
}
var _237=_236.getContext("2d");
}
catch(e){
var ie=navigator.appVersion.match(/MSIE (\d\.\d)/);
var _239=(navigator.userAgent.toLowerCase().indexOf("opera")!=-1);
if((!ie)||(ie[1]<6)||(_239)){
return false;
}
return true;
}
return true;
};
PlotKit.Canvas={};
PlotKit.Canvas.CanvasRenderer=PlotKit.CanvasRenderer;
PlotKit.Canvas.EXPORT=["CanvasRenderer"];
PlotKit.Canvas.EXPORT_OK=["CanvasRenderer"];
PlotKit.Canvas.__new__=function(){
var m=MochiKit.Base;
m.nameFunctions(this);
this.EXPORT_TAGS={":common":this.EXPORT,":all":m.concat(this.EXPORT,this.EXPORT_OK)};
};
PlotKit.Canvas.__new__();
MochiKit.Base._exportSymbols(this,PlotKit.Canvas);


// Copyright 2006 Dan Vanderkam (danvdk@gmail.com)
// All Rights Reserved.

/**
 * @fileoverview Subclasses various parts of PlotKit to meet the additional
 * needs of DateGraph: grid overlays and error bars
 */

// Subclass PlotKit.Layout to add:
// 1. Sigma/errorBars properties
// 2. Copy error terms for PlotKit.CanvasRenderer._renderLineChart

/**
 * Creates a new DateGraphLayout object. Options are the same as those allowed
 * by the PlotKit.Layout constructor.
 * @param {Object} options Options for PlotKit.Layout
 * @return {Object} The DateGraphLayout object
 */
DateGraphLayout = function(options) {
  PlotKit.Layout.call(this, "line", options);
};
DateGraphLayout.prototype = new PlotKit.Layout();

/**
 * Behaves the same way as PlotKit.Layout, but also copies the errors
 * @private
 */
DateGraphLayout.prototype.evaluateWithError = function() {
  this.evaluate();
  if (!this.options.errorBars) return;

  // Copy over the error terms
  var i = 0; // index in this.points
  for (var setName in this.datasets) {
    var j = 0;
    var dataset = this.datasets[setName];
    if (PlotKit.Base.isFuncLike(dataset)) continue;
    for (var j = 0; j < dataset.length; j++, i++) {
      var item = dataset[j];
      var xv = parseFloat(item[0]);
      var yv = parseFloat(item[1]);

      if (xv == this.points[i].xval &&
          yv == this.points[i].yval) {
        this.points[i].errorMinus = parseFloat(item[2]);
        this.points[i].errorPlus = parseFloat(item[3]);
      }
    }
  }
};

/**
 * Convenience function to remove all the data sets from a graph
 */
DateGraphLayout.prototype.removeAllDatasets = function() {
  delete this.datasets;
  this.datasets = new Array();
};

/**
 * Change the values of various layout options
 * @param {Object} new_options an associative array of new properties
 */
DateGraphLayout.prototype.updateOptions = function(new_options) {
  MochiKit.Base.update(this.options, new_options ? new_options : {});
};

// Subclass PlotKit.CanvasRenderer to add:
// 1. X/Y grid overlay
// 2. Ability to draw error bars (if required)

/**
 * Sets some PlotKit.CanvasRenderer options
 * @param {Object} element The canvas to attach to
 * @param {Layout} layout The DateGraphLayout object for this graph.
 * @param {Object} options Options to pass on to CanvasRenderer
 */
DateGraphCanvasRenderer = function(element, layout, options) {
  PlotKit.CanvasRenderer.call(this, element, layout, options);
  this.options.shouldFill = false;
  this.options.shouldStroke = true;
  this.options.drawYGrid = true;
  this.options.drawXGrid = true;
  this.options.gridLineColor = MochiKit.Color.Color.grayColor();
  MochiKit.Base.update(this.options, options);

  // TODO(danvk) This shouldn't be necessary: effects should be overlaid
  this.options.drawBackground = false;
};
DateGraphCanvasRenderer.prototype = new PlotKit.CanvasRenderer();

/**
 * Draw an X/Y grid on top of the existing plot
 */
DateGraphCanvasRenderer.prototype.render = function() {
  // Do the ordinary rendering, as before
  // TODO(danvk) Call super.render()
  this._renderLineChart();
  this._renderLineAxis();

  // Draw the new X/Y grid
  var ctx = this.element.getContext("2d");
  if (this.options.drawYGrid) {
    var ticks = this.layout.yticks;
    ctx.save();
    ctx.strokeStyle = this.options.gridLineColor.toRGBString();
    ctx.lineWidth = this.options.axisLineWidth;
    for (var i = 0; i < ticks.length; i++) {
      var x = this.area.x;
      var y = this.area.y + ticks[i][0] * this.area.h;
      ctx.beginPath();
      ctx.moveTo(x, y);
      ctx.lineTo(x + this.area.w, y);
      ctx.closePath();
      ctx.stroke();
    }
  }

  if (this.options.drawXGrid) {
    var ticks = this.layout.xticks;
    ctx.save();
    ctx.strokeStyle = this.options.gridLineColor.toRGBString();
    ctx.lineWidth = this.options.axisLineWidth;
    for (var i=0; i<ticks.length; i++) {
      var x = this.area.x + ticks[i][0] * this.area.w;
      var y = this.area.y + this.area.h;
      ctx.beginPath();
      ctx.moveTo(x, y);
      ctx.lineTo(x, this.area.y);
      ctx.closePath();
      ctx.stroke();
    }
  }
};

/**
 * Overrides the CanvasRenderer method to draw error bars
 */
DateGraphCanvasRenderer.prototype._renderLineChart = function() {
  var context = this.element.getContext("2d");
  var colorCount = this.options.colorScheme.length;
  var colorScheme = this.options.colorScheme;
  var setNames = MochiKit.Base.keys(this.layout.datasets);
  var errorBars = this.layout.options.errorBars;
  var setCount = setNames.length;
  var bind = MochiKit.Base.bind;
  var partial = MochiKit.Base.partial;

  //Update Points
  var updatePoint = function(point) {
    point.canvasx = this.area.w * point.x + this.area.x;
    point.canvasy = this.area.h * point.y + this.area.y;
  }
  MochiKit.Iter.forEach(this.layout.points, updatePoint, this);

  // create paths
  var makePath = function(ctx) {
    for (var i = 0; i < setCount; i++) {
      var setName = setNames[i];
      var color = colorScheme[i%colorCount];
      var strokeX = this.options.strokeColorTransform;

      // setup graphics context
      context.save();
      context.strokeStyle = color.toRGBString();
      context.lineWidth = this.options.strokeWidth;
      ctx.beginPath();
      var point = this.layout.points[0];
      var first_point = true;
      var addPoint = function(ctx_, point) {
        if (point.name == setName) {
          if (first_point)
            ctx_.moveTo(point.canvasx, point.canvasy);
          else
            ctx_.lineTo(point.canvasx, point.canvasy);
          first_point = false;
        }
      };
      MochiKit.Iter.forEach(this.layout.points, partial(addPoint, ctx), this);
      ctx.stroke();
    }
  };

  var makeErrorBars = function(ctx) {
    for (var i = 0; i < setCount; i++) {
      var setName = setNames[i];
      var color = colorScheme[i % colorCount];
      var strokeX = this.options.strokeColorTransform;

      // setup graphics context
      context.save();
      context.strokeStyle = color.toRGBString();
      context.lineWidth = this.options.strokeWidth;
      var prevX = -1;
      var prevYs = [-1, -1];
      var count = 0;
      var yscale = this.layout.yscale;
      var errorTrapezoid = function(ctx_,point) {
        count++;
        if (point.name == setName) {
          var newYs = [ point.y - point.errorPlus * yscale,
                        point.y + point.errorMinus * yscale ];
          newYs[0] = this.area.h * newYs[0] + this.area.y;
          newYs[1] = this.area.h * newYs[1] + this.area.y;
          if (prevX >= 0) {
            ctx_.moveTo(prevX, prevYs[0]);
            ctx_.lineTo(point.canvasx, newYs[0]);
            ctx_.lineTo(point.canvasx, newYs[1]);
            ctx_.lineTo(prevX, prevYs[1]);
            ctx_.closePath();
          }
          prevYs[0] = newYs[0];
          prevYs[1] = newYs[1];
          prevX = point.canvasx;
        }
      };
      // should be same color as the lines
      var err_color = color.colorWithAlpha(0.15);
      ctx.fillStyle = err_color.toRGBString();
      ctx.beginPath();
      MochiKit.Iter.forEach(this.layout.points, partial(errorTrapezoid, ctx), this);
      ctx.fill();
    }
  };

  if (errorBars)
    bind(makeErrorBars, this)(context);
  bind(makePath, this)(context);
  context.restore();
};
// Copyright 2006 Dan Vanderkam (danvdk@gmail.com)
// All Rights Reserved.

/**
 * @fileoverview Creates an interactive, zoomable graph based on a CSV file or
 * string. DateGraph can handle multiple series with or without error bars. The
 * date/value ranges will be automatically set. DateGraph uses the
 * &lt;canvas&gt; tag, so it only works in FF1.5+.
 * @author danvdk@gmail.com (Dan Vanderkam)

  Usage:
   <div id="graphdiv" style="width:800px; height:500px;"></div>
   <script type="text/javascript">
     new DateGraph(document.getElementById("graphdiv"),
                   "datafile.csv",
                     ["Series 1", "Series 2"],
                     { }); // options
   </script>

 The CSV file is of the form

   YYYYMMDD,A1,B1,C1
   YYYYMMDD,A2,B2,C2

 If null is passed as the third parameter (series names), then the first line
 of the CSV file is assumed to contain names for each series.

 If the 'errorBars' option is set in the constructor, the input should be of
 the form

   YYYYMMDD,A1,sigmaA1,B1,sigmaB1,...
   YYYYMMDD,A2,sigmaA2,B2,sigmaB2,...

 If the 'fractions' option is set, the input should be of the form:

   YYYYMMDD,A1/B1,A2/B2,...
   YYYYMMDD,A1/B1,A2/B2,...

 And error bars will be calculated automatically using a binomial distribution.

 For further documentation and examples, see http://www/~danvk/dg/

 */

/**
 * An interactive, zoomable graph
 * @param {String | Function} file A file containing CSV data or a function that
 * returns this data. The expected format for each line is
 * YYYYMMDD,val1,val2,... or, if attrs.errorBars is set,
 * YYYYMMDD,val1,stddev1,val2,stddev2,...
 * @param {Array.<String>} labels Labels for the data series
 * @param {Object} attrs Various other attributes, e.g. errorBars determines
 * whether the input data contains error ranges.
 */
DateGraph = function(div, file, labels, attrs) {
  if (arguments.length > 0)
    this.__init__(div, file, labels, attrs);
};

DateGraph.NAME = "DateGraph";
DateGraph.VERSION = "1.1";
DateGraph.__repr__ = function() {
  return "[" + this.NAME + " " + this.VERSION + "]";
};
DateGraph.toString = function() {
  return this.__repr__();
};

// Various default values
DateGraph.DEFAULT_ROLL_PERIOD = 1;
DateGraph.DEFAULT_WIDTH = 480;
DateGraph.DEFAULT_HEIGHT = 320;
DateGraph.DEFAULT_STROKE_WIDTH = 1.0;
DateGraph.AXIS_LINE_WIDTH = 0.3;

/**
 * Initializes the DateGraph. This creates a new DIV and constructs the PlotKit
 * and interaction &lt;canvas&gt; inside of it. See the constructor for details
 * on the parameters.
 * @param {String | Function} file Source data
 * @param {Array.<String>} labels Names of the data series
 * @param {Object} attrs Miscellaneous other options
 * @private
 */
DateGraph.prototype.__init__ = function(div, file, labels, attrs) {
  // Copy the important bits into the object
  this.maindiv_ = div;
  this.labels_ = labels;
  this.file_ = file;
  this.rollPeriod_ = attrs.rollPeriod || DateGraph.DEFAULT_ROLL_PERIOD;
  this.previousVerticalX_ = -1;
  this.width_ = parseInt(div.style.width, 10);
  this.height_ = parseInt(div.style.height, 10);
  this.errorBars_ = attrs.errorBars || false;
  this.fractions_ = attrs.fractions || false;
  this.strokeWidth_ = attrs.strokeWidth || DateGraph.DEFAULT_STROKE_WIDTH;
  this.dateWindow_ = attrs.dateWindow || null;
  this.valueRange_ = attrs.valueRange || null;
  this.labelsSeparateLines = attrs.labelsSeparateLines || false;
  this.labelsDiv_ = attrs.labelsDiv || null;
  this.labelsKMB_ = attrs.labelsKMB || false;
  this.minTickSize_ = attrs.minTickSize || 0;
  this.xValueParser_ = attrs.xValueParser || DateGraph.prototype.dateParser;
  this.xValueFormatter_ = attrs.xValueFormatter ||
      DateGraph.prototype.dateString_;
  this.xTicker_ = attrs.xTicker || DateGraph.prototype.dateTicker;
  this.sigma_ = attrs.sigma || 2.0;
  this.wilsonInterval_ = attrs.wilsonInterval || true;
  this.customBars_ = attrs.customBars || false;
  this.attrs_ = attrs;

  // Make a note of whether labels will be pulled from the CSV file.
  this.labelsFromCSV_ = (this.labels_ == null);
  if (this.labels_ == null)
    this.labels_ = [];

  // Prototype of the callback is "void clickCallback(event, date)"
  this.clickCallback_ = attrs.clickCallback || null;

  // Prototype of zoom callback is "void dragCallback(minDate, maxDate)"
  this.zoomCallback_ = attrs.zoomCallback || null;

  // Create the containing DIV and other interactive elements
  this.createInterface_();

  // Create the PlotKit grapher
  this.layoutOptions_ = { 'errorBars': (this.errorBars_ || this.customBars_),
                          'xOriginIsZero': false };
  MochiKit.Base.update(this.layoutOptions_, attrs);
  this.setColors_(attrs);

  this.layout_ = new DateGraphLayout(this.layoutOptions_);

  this.renderOptions_ = { colorScheme: this.colors_,
                          strokeColor: null,
                          strokeWidth: this.strokeWidth_,
                          axisLabelFontSize: 14,
                          axisLineWidth: DateGraph.AXIS_LINE_WIDTH };
  MochiKit.Base.update(this.renderOptions_, attrs);
  this.plotter_ = new DateGraphCanvasRenderer(this.hidden_, this.layout_,
                                              this.renderOptions_);

  this.createStatusMessage_();
  this.createRollInterface_();
  this.createDragInterface_();

  connect(window, 'onload', this, function(e) { this.start_(); });
};

/**
 * Returns the current rolling period, as set by the user or an option.
 * @return {Number} The number of days in the rolling window
 */
DateGraph.prototype.rollPeriod = function() {
  return this.rollPeriod_;
}

/**
 * Generates interface elements for the DateGraph: a containing div, a div to
 * display the current point, and a textbox to adjust the rolling average
 * period.
 * @private
 */
DateGraph.prototype.createInterface_ = function() {
  // Create the all-enclosing graph div
  var enclosing = this.maindiv_;

  this.graphDiv = MochiKit.DOM.DIV( { style: { 'width': this.width_ + "px",
                                                'height': this.height_ + "px"
                                                 }});
  appendChildNodes(enclosing, this.graphDiv);

  // Create the canvas to store
  var canvas = MochiKit.DOM.CANVAS;
  this.canvas_ = canvas( { style: { 'position': 'absolute' },
                          width: this.width_,
                          height: this.height_});
  appendChildNodes(this.graphDiv, this.canvas_);

  this.hidden_ = this.createPlotKitCanvas_(this.canvas_);
  connect(this.hidden_, 'onmousemove', this, function(e) { this.mouseMove_(e) });
  connect(this.hidden_, 'onmouseout', this, function(e) { this.mouseOut_(e) });
}

/**
 * Creates the canvas containing the PlotKit graph. Only plotkit ever draws on
 * this particular canvas. All DateGraph work is done on this.canvas_.
 * @param {Object} canvas The DateGraph canvas to over which to overlay the plot
 * @return {Object} The newly-created canvas
 * @private
 */
DateGraph.prototype.createPlotKitCanvas_ = function(canvas) {
  var h = document.createElement("canvas");
  h.style.position = "absolute";
  h.style.top = canvas.style.top;
  h.style.left = canvas.style.left;
  h.width = this.width_;
  h.height = this.height_;
  MochiKit.DOM.appendChildNodes(this.graphDiv, h);
  return h;
};

/**
 * Generate a set of distinct colors for the data series. This is done with a
 * color wheel. Saturation/Value are customizable, and the hue is
 * equally-spaced around the color wheel. If a custom set of colors is
 * specified, that is used instead.
 * @param {Object} attrs Various attributes, e.g. saturation and value
 * @private
 */
DateGraph.prototype.setColors_ = function(attrs) {
  var num = this.labels_.length;
  this.colors_ = [];
  if (!attrs.colors) {
    var sat = attrs.colorSaturation || 1.0;
    var val = attrs.colorValue || 0.5;
    for (var i = 1; i <= num; i++) {
      var hue = (1.0*i/(1+num));
      this.colors_.push( MochiKit.Color.Color.fromHSV(hue, sat, val) );
    }
  } else {
    for (var i = 0; i < num; i++) {
      var colorStr = attrs.colors[i % attrs.colors.length];
      this.colors_.push( MochiKit.Color.Color.fromString(colorStr) );
    }
  }
}

/**
 * Create the div that contains information on the selected point(s)
 * This goes in the top right of the canvas, unless an external div has already
 * been specified.
 * @private
 */
DateGraph.prototype.createStatusMessage_ = function(){
  if (!this.labelsDiv_) {
    var divWidth = 250;
    var messagestyle = { "style": {
      "position": "absolute",
      "fontSize": "14px",
      "zIndex": 10,
      "width": divWidth + "px",
      "top": "0px",
      "left": this.width_ - divWidth + "px",
      "background": "white",
      "textAlign": "left",
      "overflow": "hidden"}};
    this.labelsDiv_ = MochiKit.DOM.DIV(messagestyle);
    MochiKit.DOM.appendChildNodes(this.graphDiv, this.labelsDiv_);
  }
};

/**
 * Create the text box to adjust the averaging period
 * @return {Object} The newly-created text box
 * @private
 */
DateGraph.prototype.createRollInterface_ = function() {
  var padding = this.plotter_.options.padding;
  var textAttr = { "type": "text",
                   "size": "2",
                   "value": this.rollPeriod_,
                   "style": { "position": "absolute",
                              "zIndex": 10,
                              "top": (this.height_ - 25 - padding.bottom) + "px",
                              "left": (padding.left+1) + "px" }
                  };
  var roller = MochiKit.DOM.INPUT(textAttr);
  var pa = this.graphDiv;
  MochiKit.DOM.appendChildNodes(pa, roller);
  connect(roller, 'onchange', this,
          function() { this.adjustRoll(roller.value); });
  return roller;
}

/**
 * Set up all the mouse handlers needed to capture dragging behavior for zoom
 * events. Uses MochiKit.Signal to attach all the event handlers.
 * @private
 */
DateGraph.prototype.createDragInterface_ = function() {
  var self = this;

  // Tracks whether the mouse is down right now
  var mouseDown = false;
  var dragStartX = null;
  var dragStartY = null;
  var dragEndX = null;
  var dragEndY = null;
  var prevEndX = null;

  // Utility function to convert page-wide coordinates to canvas coords
  var px = PlotKit.Base.findPosX(this.canvas_);
  var py = PlotKit.Base.findPosY(this.canvas_);
  var getX = function(e) { return e.mouse().page.x - px };
  var getY = function(e) { return e.mouse().page.y - py };

  // Draw zoom rectangles when the mouse is down and the user moves around
  connect(this.hidden_, 'onmousemove', function(event) {
    if (mouseDown) {
      dragEndX = getX(event);
      dragEndY = getY(event);

      self.drawZoomRect_(dragStartX, dragEndX, prevEndX);
      prevEndX = dragEndX;
    }
  });

  // Track the beginning of drag events
  connect(this.hidden_, 'onmousedown', function(event) {
    mouseDown = true;
    dragStartX = getX(event);
    dragStartY = getY(event);
  });

  // If the user releases the mouse button during a drag, but not over the
  // canvas, then it doesn't count as a zooming action.
  connect(document, 'onmouseup', this, function(event) {
    if (mouseDown) {
      mouseDown = false;
      dragStartX = null;
      dragStartY = null;
    }
  });

  // Temporarily cancel the dragging event when the mouse leaves the graph
  connect(this.hidden_, 'onmouseout', this, function(event) {
    if (mouseDown) {
      dragEndX = null;
      dragEndY = null;
    }
  });

  // If the mouse is released on the canvas during a drag event, then it's a
  // zoom. Only do the zoom if it's over a large enough area (>= 10 pixels)
  connect(this.hidden_, 'onmouseup', this, function(event) {
    if (mouseDown) {
      mouseDown = false;
      dragEndX = getX(event);
      dragEndY = getY(event);
      var regionWidth = Math.abs(dragEndX - dragStartX);
      var regionHeight = Math.abs(dragEndY - dragStartY);

      if (regionWidth < 2 && regionHeight < 2 &&
          self.clickCallback_ != null &&
          self.lastx_ != undefined) {
        self.clickCallback_(event, new Date(self.lastx_));
      }

      if (regionWidth >= 10) {
        self.doZoom_(Math.min(dragStartX, dragEndX),
                     Math.max(dragStartX, dragEndX));
      } else {
        self.canvas_.getContext("2d").clearRect(0, 0,
                                           self.canvas_.width,
                                           self.canvas_.height);
      }

      dragStartX = null;
      dragStartY = null;
    }
  });

  // Double-clicking zooms back out
  connect(this.hidden_, 'ondblclick', this, function(event) {
    self.dateWindow_ = null;
    self.drawGraph_(self.rawData_);
    var minDate = self.rawData_[0][0];
    var maxDate = self.rawData_[self.rawData_.length - 1][0];
    self.zoomCallback_(minDate, maxDate);
  });
};

/**
 * Draw a gray zoom rectangle over the desired area of the canvas. Also clears
 * up any previous zoom rectangles that were drawn. This could be optimized to
 * avoid extra redrawing, but it's tricky to avoid interactions with the status
 * dots.
 * @param {Number} startX The X position where the drag started, in canvas
 * coordinates.
 * @param {Number} endX The current X position of the drag, in canvas coords.
 * @param {Number} prevEndX The value of endX on the previous call to this
 * function. Used to avoid excess redrawing
 * @private
 */
DateGraph.prototype.drawZoomRect_ = function(startX, endX, prevEndX) {
  var ctx = this.canvas_.getContext("2d");

  // Clean up from the previous rect if necessary
  if (prevEndX) {
    ctx.clearRect(Math.min(startX, prevEndX), 0,
                  Math.abs(startX - prevEndX), this.height_);
  }

  // Draw a light-grey rectangle to show the new viewing area
  if (endX && startX) {
    ctx.fillStyle = "rgba(128,128,128,0.33)";
    ctx.fillRect(Math.min(startX, endX), 0,
                 Math.abs(endX - startX), this.height_);
  }
};

/**
 * Zoom to something containing [lowX, highX]. These are pixel coordinates
 * in the canvas. The exact zoom window may be slightly larger if there are no
 * data points near lowX or highX. This function redraws the graph.
 * @param {Number} lowX The leftmost pixel value that should be visible.
 * @param {Number} highX The rightmost pixel value that should be visible.
 * @private
 */
DateGraph.prototype.doZoom_ = function(lowX, highX) {
  // Find the earliest and latest dates contained in this canvasx range.
  var points = this.layout_.points;
  var minDate = null;
  var maxDate = null;
  // Find the nearest [minDate, maxDate] that contains [lowX, highX]
  for (var i = 0; i < points.length; i++) {
    var cx = points[i].canvasx;
    var x = points[i].xval;
    if (cx < lowX  && (minDate == null || x > minDate)) minDate = x;
    if (cx > highX && (maxDate == null || x < maxDate)) maxDate = x;
  }
  // Use the extremes if either is missing
  if (minDate == null) minDate = points[0].xval;
  if (maxDate == null) maxDate = points[points.length-1].xval;

  this.dateWindow_ = [minDate, maxDate];
  this.drawGraph_(this.rawData_);
  this.zoomCallback_(minDate, maxDate);
};

/**
 * When the mouse moves in the canvas, display information about a nearby data
 * point and draw dots over those points in the data series. This function
 * takes care of cleanup of previously-drawn dots.
 * @param {Object} event The mousemove event from the browser.
 * @private
 */
DateGraph.prototype.mouseMove_ = function(event) {
  var canvasx = event.mouse().page.x - PlotKit.Base.findPosX(this.hidden_);
  var points = this.layout_.points;

  var lastx = -1;
  var lasty = -1;

  // Loop through all the points and find the date nearest to our current
  // location.
  var minDist = 1e+100;
  var idx = -1;
  for (var i = 0; i < points.length; i++) {
    var dist = Math.abs(points[i].canvasx - canvasx);
    if (dist > minDist) break;
    minDist = dist;
    idx = i;
  }
  if (idx >= 0) lastx = points[idx].xval;
  // Check that you can really highlight the last day's data
  if (canvasx > points[points.length-1].canvasx)
    lastx = points[points.length-1].xval;

  // Extract the points we've selected
  var selPoints = [];
  for (var i = 0; i < points.length; i++) {
    if (points[i].xval == lastx) {
      selPoints.push(points[i]);
    }
  }

  // Clear the previously drawn vertical, if there is one
  var circleSize = 3;
  var ctx = this.canvas_.getContext("2d");
  if (this.previousVerticalX_ >= 0) {
    var px = this.previousVerticalX_;
    ctx.clearRect(px - circleSize - 1, 0, 2 * circleSize + 2, this.height_);
  }

  if (selPoints.length > 0) {
    var canvasx = selPoints[0].canvasx;

    // Set the status message to indicate the selected point(s)
    var replace = this.xValueFormatter_(lastx) + ":";
    var clen = this.colors_.length;
    for (var i = 0; i < selPoints.length; i++) {
      if (this.labelsSeparateLines) {
        replace += "<br/>";
      }
      var point = selPoints[i];
      replace += " <b><font color='" + this.colors_[i%clen].toHexString() + "'>"
              + point.name + "</font></b>:"
              + this.round_(point.yval, 2);
    }
    this.labelsDiv_.innerHTML = replace;

    // Save last x position for callbacks.
    this.lastx_ = lastx;

    // Draw colored circles over the center of each selected point
    ctx.save()
    for (var i = 0; i < selPoints.length; i++) {
      ctx.beginPath();
      ctx.fillStyle = this.colors_[i%clen].toRGBString();
      ctx.arc(canvasx, selPoints[i%clen].canvasy, circleSize, 0, 360, false);
      ctx.fill();
    }
    ctx.restore();

    this.previousVerticalX_ = canvasx;
  }
};

/**
 * The mouse has left the canvas. Clear out whatever artifacts remain
 * @param {Object} event the mouseout event from the browser.
 * @private
 */
DateGraph.prototype.mouseOut_ = function(event) {
  // Get rid of the overlay data
  var ctx = this.canvas_.getContext("2d");
  ctx.clearRect(0, 0, this.width_, this.height_);
  this.labelsDiv_.innerHTML = "";
};

/**
 * Convert a JS date (millis since epoch) to YYYY/MM/DD
 * @param {Number} date The JavaScript date (ms since epoch)
 * @return {String} A date of the form "YYYY/MM/DD"
 * @private
 */
DateGraph.prototype.dateString_ = function(date) {
  var d = new Date(date);

  // Get the year:
  var year = "" + d.getFullYear();
  // Get a 0 padded month string
  var month = "" + (d.getMonth() + 1);  //months are 0-offset, sigh
  if (month.length < 2)  month = "0" + month;
  // Get a 0 padded day string
  var day = "" + d.getDate();
  if (day.length < 2)  day = "0" + day;

  return year + "/" + month + "/" + day;
};

/**
 * Round a number to the specified number of digits past the decimal point.
 * @param {Number} num The number to round
 * @param {Number} places The number of decimals to which to round
 * @return {Number} The rounded number
 * @private
 */
DateGraph.prototype.round_ = function(num, places) {
  var shift = Math.pow(10, places);
  return Math.round(num * shift)/shift;
};

/**
 * Fires when there's data available to be graphed.
 * @param {String} data Raw CSV data to be plotted
 * @private
 */
DateGraph.prototype.loadedEvent_ = function(data) {
  this.rawData_ = this.parseCSV_(data);
  this.drawGraph_(this.rawData_);
};

DateGraph.prototype.months =  ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
                               "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
DateGraph.prototype.quarters = ["Jan", "Apr", "Jul", "Oct"];

/**
 * Add ticks on the x-axis representing years, months, quarters, weeks, or days
 * @private
 */
DateGraph.prototype.addXTicks_ = function() {
  // Determine the correct ticks scale on the x-axis: quarterly, monthly, ...
  var startDate, endDate;
  if (this.dateWindow_) {
    startDate = this.dateWindow_[0];
    endDate = this.dateWindow_[1];
  } else {
    startDate = this.rawData_[0][0];
    endDate   = this.rawData_[this.rawData_.length - 1][0];
  }

  var xTicks = this.xTicker_(startDate, endDate);
  this.layout_.updateOptions({xTicks: xTicks});
}

/**
 * Add ticks to the x-axis based on a date range.
 * @param {Number} startDate Start of the date window (millis since epoch)
 * @param {Number} endDate End of the date window (millis since epoch)
 * @return {Array.<Object>} Array of {label, value} tuples.
 * @public
 */
DateGraph.prototype.dateTicker = function(startDate, endDate) {
  var ONE_DAY = 24*60*60*1000;
  startDate = startDate / ONE_DAY;
  endDate = endDate / ONE_DAY;
  var dateSpan = endDate - startDate;

  var scale = [];
  var isMonthly = false;
  var yearMod = 1;
  if (dateSpan > 30 * 366) {      // decadal
    isMonthly = true;
    scale = ["Jan"];
    yearMod = 10;
  } else if (dateSpan > 4*366) {  // annual
    scale = ["Jan"];
    isMonthly = true;
  } else if (dateSpan > 366) {    // quarterly
    scale = this.quarters;
    isMonthly = true;
  } else if (dateSpan > 40) {     // monthly
    scale = this.months;
    isMonthly = true;
  } else if (dateSpan > 10) {     // weekly
    for (var week = startDate - 14; week < endDate + 14; week += 7) {
      scale.push(week * ONE_DAY);
    }
  } else {                        // daily
    for (var day = startDate - 14; day < endDate + 14; day += 1) {
      scale.push(day * ONE_DAY);
    }
  }

  var xTicks = [];

  if (isMonthly) {
    var startYear = 1900 + (new Date(startDate* ONE_DAY)).getYear();
    var endYear   = 1900 + (new Date(endDate  * ONE_DAY)).getYear();
    for (var i = startYear; i <= endYear; i++) {
      if (i % yearMod != 0) continue;
      for (var j = 0; j < scale.length; j++ ) {
        var date = Date.parse(scale[j] + " 1, " + i);
        xTicks.push( {label: scale[j] + "'" + ("" + i).substr(2,2), v: date } );
      }
    }
  } else {
    for (var i = 0; i < scale.length; i++) {
      var date = new Date(scale[i]);
      var year = date.getFullYear().toString();
      var label = this.months[date.getMonth()] + date.getDate();
      label += "'" + year.substr(year.length - 2, 2);
      xTicks.push( {label: label, v: date} );
    }
  }
  return xTicks;
};

/**
 * Add ticks when the x axis has numbers on it (instead of dates)
 * @param {Number} startDate Start of the date window (millis since epoch)
 * @param {Number} endDate End of the date window (millis since epoch)
 * @return {Array.<Object>} Array of {label, value} tuples.
 * @public
 */
DateGraph.prototype.numericTicks = function(minV, maxV) {
  var scale;
  if (maxV <= 0.0) {
    scale = 1.0;
  } else {
    scale = Math.pow( 10, Math.floor(Math.log(maxV)/Math.log(10.0)) );
  }

  // Add a smallish number of ticks at human-friendly points
  var nTicks = (maxV - minV) / scale;
  while (2 * nTicks < 20) {
    nTicks *= 2;
  }
  if ((maxV - minV) / nTicks < this.minTickSize_) {
    nTicks = this.round_((maxV - minV) / this.minTickSize_, 1);
  }

  // Construct labels for the ticks
  var ticks = [];
  for (var i = 0; i <= nTicks; i++) {
    var tickV = minV + i * (maxV - minV) / nTicks;
    var label = this.round_(tickV, 2);
    if (this.labelsKMB_) {
      var k = 1000;
      if (tickV >= k*k*k) {
        label = this.round_(tickV/(k*k*k), 1) + "B";
      } else if (tickV >= k*k) {
        label = this.round_(tickV/(k*k), 1) + "M";
      } else if (tickV >= k) {
        label = this.round_(tickV/k, 1) + "K";
      }
    }
    ticks.push( {label: label, v: tickV} );
  }
  return ticks;
};

/**
 * Adds appropriate ticks on the y-axis
 * @param {Number} minY The minimum Y value in the data set
 * @param {Number} maxY The maximum Y value in the data set
 * @private
 */
DateGraph.prototype.addYTicks_ = function(minY, maxY) {
  // Set the number of ticks so that the labels are human-friendly.
  var ticks = this.numericTicks(minY, maxY);
  this.layout_.updateOptions( { yAxis: [minY, maxY],
                                yTicks: ticks } );
};

/**
 * Update the graph with new data. Data is in the format
 * [ [date1, val1, val2, ...], [date2, val1, val2, ...] if errorBars=false
 * or, if errorBars=true,
 * [ [date1, [val1,stddev1], [val2,stddev2], ...], [date2, ...], ...]
 * @param {Array.<Object>} data The data (see above)
 * @private
 */
DateGraph.prototype.drawGraph_ = function(data) {
  var maxY = null;
  this.layout_.removeAllDatasets();
  // Loop over all fields in the dataset
  for (var i = 1; i < data[0].length; i++) {
    var series = [];
    for (var j = 0; j < data.length; j++) {
      var date = data[j][0];
      series[j] = [date, data[j][i]];
    }
    series = this.rollingAverage(series, this.rollPeriod_);

    // Prune down to the desired range, if necessary (for zooming)
    var bars = this.errorBars_ || this.customBars_;
    if (this.dateWindow_) {
      var low = this.dateWindow_[0];
      var high= this.dateWindow_[1];
      var pruned = [];
      for (var k = 0; k < series.length; k++) {
        if (series[k][0] >= low && series[k][0] <= high) {
          pruned.push(series[k]);
          var y = bars ? series[k][1][0] : series[k][1];
          if (maxY == null || y > maxY) maxY = y;
        }
      }
      series = pruned;
    } else {
      for (var j = 0; j < series.length; j++) {
        var y = bars ? series[j][1][0] : series[j][1];
        if (maxY == null || y > maxY) {
          maxY = bars ? y + series[j][1][1] : y;
        }
      }
    }

    if (bars) {
      var vals = [];
      for (var j=0; j<series.length; j++)
        vals[j] = [series[j][0],
                   series[j][1][0], series[j][1][1], series[j][1][2]];
      this.layout_.addDataset(this.labels_[i - 1], vals);
    } else {
      this.layout_.addDataset(this.labels_[i - 1], series);
    }
  }

  // Use some heuristics to come up with a good maxY value, unless it's been
  // set explicitly by the user.
  if (this.valueRange_ != null) {
    this.addYTicks_(this.valueRange_[0], this.valueRange_[1]);
  } else {
    // Add some padding and round up to an integer to be human-friendly.
    maxY *= 1.1;
    if (maxY <= 0.0) maxY = 1.0;
    else {
      var scale = Math.pow(10, Math.floor(Math.log(maxY) / Math.log(10.0)));
      maxY = scale * Math.ceil(maxY / scale);
    }
    this.addYTicks_(0, maxY);
  }

  this.addXTicks_();

  // Tell PlotKit to use this new data and render itself
  this.layout_.evaluateWithError();
  this.plotter_.clear();
  this.plotter_.render();
  this.canvas_.getContext('2d').clearRect(0, 0,
                                         this.canvas_.width, this.canvas_.height);
};

/**
 * Calculates the rolling average of a data set.
 * If originalData is [label, val], rolls the average of those.
 * If originalData is [label, [, it's interpreted as [value, stddev]
 *   and the roll is returned in the same form, with appropriately reduced
 *   stddev for each value.
 * Note that this is where fractional input (i.e. '5/10') is converted into
 *   decimal values.
 * @param {Array} originalData The data in the appropriate format (see above)
 * @param {Number} rollPeriod The number of days over which to average the data
 */
DateGraph.prototype.rollingAverage = function(originalData, rollPeriod) {
  if (originalData.length < 2)
    return originalData;
  var rollPeriod = Math.min(rollPeriod, originalData.length - 1);
  var rollingData = [];
  var sigma = this.sigma_;

  if (this.fractions_) {
    var num = 0;
    var den = 0;  // numerator/denominator
    var mult = 100.0;
    for (var i = 0; i < originalData.length; i++) {
      num += originalData[i][1][0];
      den += originalData[i][1][1];
      if (i - rollPeriod >= 0) {
        num -= originalData[i - rollPeriod][1][0];
        den -= originalData[i - rollPeriod][1][1];
      }

      var date = originalData[i][0];
      var value = den ? num / den : 0.0;
      if (this.errorBars_) {
        if (this.wilsonInterval_) {
          // For more details on this confidence interval, see:
          // http://en.wikipedia.org/wiki/Binomial_confidence_interval
          if (den) {
            var p = value < 0 ? 0 : value, n = den;
            var pm = sigma * Math.sqrt(p*(1-p)/n + sigma*sigma/(4*n*n));
            var denom = 1 + sigma * sigma / den;
            var low  = (p + sigma * sigma / (2 * den) - pm) / denom;
            var high = (p + sigma * sigma / (2 * den) + pm) / denom;
            rollingData[i] = [date,
                              [p * mult, (p - low) * mult, (high - p) * mult]];
          } else {
            rollingData[i] = [date, [0, 0, 0]];
          }
        } else {
          var stddev = den ? sigma * Math.sqrt(value * (1 - value) / den) : 1.0;
          rollingData[i] = [date, [mult * value, mult * stddev, mult * stddev]];
        }
      } else {
        rollingData[i] = [date, mult * value];
      }
    }
  } else if (this.customBars_) {
    // just ignore the rolling for now.
    // TODO(danvk): do something reasonable.
    for (var i = 0; i < originalData.length; i++) {
      var data = originalData[i][1];
      var y = data[1];
      rollingData[i] = [originalData[i][0], [y, y - data[0], data[2] - y]];
    }
  } else {
    // Calculate the rolling average for the first rollPeriod - 1 points where
    // there is not enough data to roll over the full number of days
    var num_init_points = Math.min(rollPeriod - 1, originalData.length - 2);
    if (!this.errorBars_){
      for (var i = 0; i < num_init_points; i++) {
        var sum = 0;
        for (var j = 0; j < i + 1; j++)
          sum += originalData[j][1];
        rollingData[i] = [originalData[i][0], sum / (i + 1)];
      }
      // Calculate the rolling average for the remaining points
      for (var i = Math.min(rollPeriod - 1, originalData.length - 2);
          i < originalData.length;
          i++) {
        var sum = 0;
        for (var j = i - rollPeriod + 1; j < i + 1; j++)
          sum += originalData[j][1];
        rollingData[i] = [originalData[i][0], sum / rollPeriod];
      }
    } else {
      for (var i = 0; i < num_init_points; i++) {
        var sum = 0;
        var variance = 0;
        for (var j = 0; j < i + 1; j++) {
          sum += originalData[j][1][0];
          variance += Math.pow(originalData[j][1][1], 2);
        }
        var stddev = Math.sqrt(variance)/(i+1);
        rollingData[i] = [originalData[i][0],
                          [sum/(i+1), sigma * stddev, sigma * stddev]];
      }
      // Calculate the rolling average for the remaining points
      for (var i = Math.min(rollPeriod - 1, originalData.length - 2);
          i < originalData.length;
          i++) {
        var sum = 0;
        var variance = 0;
        for (var j = i - rollPeriod + 1; j < i + 1; j++) {
          sum += originalData[j][1][0];
          variance += Math.pow(originalData[j][1][1], 2);
        }
        var stddev = Math.sqrt(variance) / rollPeriod;
        rollingData[i] = [originalData[i][0],
                          [sum / rollPeriod, sigma * stddev, sigma * stddev]];
      }
    }
  }

  return rollingData;
};

/**
 * Parses a date, returning the number of milliseconds since epoch. This can be
 * passed in as an xValueParser in the DateGraph constructor.
 * @param {String} A date in YYYYMMDD format.
 * @return {Number} Milliseconds since epoch.
 * @public
 */
DateGraph.prototype.dateParser = function(dateStr) {
  var dateStrSlashed;
  if (dateStr.search("-") != -1) {
    dateStrSlashed = dateStr.replace("-", "/", "g");
  } else if (dateStr.search("/") != -1) {
    return Date.parse(dateStr);
  } else {
    dateStrSlashed = dateStr.substr(0,4) + "/" + dateStr.substr(4,2)
                       + "/" + dateStr.substr(6,2);
  }
  return Date.parse(dateStrSlashed);
};

/**
 * Parses a string in a special csv format.  We expect a csv file where each
 * line is a date point, and the first field in each line is the date string.
 * We also expect that all remaining fields represent series.
 * if this.errorBars_ is set, then interpret the fields as:
 * date, series1, stddev1, series2, stddev2, ...
 * @param {Array.<Object>} data See above.
 * @private
 */
DateGraph.prototype.parseCSV_ = function(data) {
  var ret = [];
  var lines = data.split("\n");
  var start = this.labelsFromCSV_ ? 1 : 0;
  if (this.labelsFromCSV_) {
    var labels = lines[0].split(",");
    labels.shift();  // a "date" parameter is assumed.
    this.labels_ = labels;
    // regenerate automatic colors.
    this.setColors_(this.attrs_);
    this.renderOptions_.colorScheme = this.colors_;
    MochiKit.Base.update(this.plotter_.options, this.renderOptions_);
    MochiKit.Base.update(this.layoutOptions_, this.attrs_);
  }

  for (var i = start; i < lines.length; i++) {
    var line = lines[i];
    if (line.length == 0) continue;  // skip blank lines
    var inFields = line.split(',');
    if (inFields.length < 2)
      continue;

    var fields = [];
    fields[0] = this.xValueParser_(inFields[0]);

    // If fractions are expected, parse the numbers as "A/B"
    if (this.fractions_) {
      for (var j = 1; j < inFields.length; j++) {
        // TODO(danvk): figure out an appropriate way to flag parse errors.
        var vals = inFields[j].split("/");
        fields[j] = [parseFloat(vals[0]), parseFloat(vals[1])];
      }
    } else if (this.errorBars_) {
      // If there are error bars, values are (value, stddev) pairs
      for (var j = 1; j < inFields.length; j += 2)
        fields[(j + 1) / 2] = [parseFloat(inFields[j]),
                               parseFloat(inFields[j + 1])];
    } else if (this.customBars_) {
      // Bars are a low;center;high tuple
      for (var j = 1; j < inFields.length; j++) {
        var vals = inFields[j].split(";");
        fields[j] = [ parseFloat(vals[0]),
                      parseFloat(vals[1]),
                      parseFloat(vals[2]) ];
      }
    } else {
      // Values are just numbers
      for (var j = 1; j < inFields.length; j++)
        fields[j] = parseFloat(inFields[j]);
    }
    ret.push(fields);
  }
  return ret;
};

/**
 * Get the CSV data. If it's in a function, call that function. If it's in a
 * file, do an XMLHttpRequest to get it.
 * @private
 */
DateGraph.prototype.start_ = function() {
  if (typeof this.file_ == 'function') {
    // Stubbed out to allow this to run off a filesystem
    this.loadedEvent_(this.file_());
  } else {
    var req = new XMLHttpRequest();
    var caller = this;
    req.onreadystatechange = function () {
      if (req.readyState == 4) {
        if (req.status == 200) {
          caller.loadedEvent_(req.responseText);
        }
      }
    };

    req.open("GET", this.file_, true);
    req.send(null);
  }
};

/**
 * Changes various properties of the graph. These can include:
 * <ul>
 * <li>file: changes the source data for the graph</li>
 * <li>errorBars: changes whether the data contains stddev</li>
 * </ul>
 * @param {Object} attrs The new properties and values
 */
DateGraph.prototype.updateOptions = function(attrs) {
  if (attrs.errorBars) {
    this.errorBars_ = attrs.errorBars;
  }
  if (attrs.customBars) {
    this.customBars_ = attrs.customBars;
  }
  if (attrs.strokeWidth) {
    this.strokeWidth_ = attrs.strokeWidth;
  }
  if (attrs.rollPeriod) {
    this.rollPeriod_ = attrs.rollPeriod;
  }
  if (attrs.dateWindow) {
    this.dateWindow_ = attrs.dateWindow;
  }
  if (attrs.valueRange) {
    this.valueRange_ = attrs.valueRange;
  }
  if (attrs.minTickSize) {
    this.minTickSize_ = attrs.minTickSize;
  }
  if (typeof(attrs.labels) != 'undefined') {
    this.labels_ = attrs.labels;
    this.labelsFromCSV_ = (attrs.labels == null);
  }
  this.layout_.updateOptions({ 'errorBars': this.errorBars_ });
  if (attrs['file'] && attrs['file'] != this.file_) {
    this.file_ = attrs['file'];
    this.start_();
  } else {
    this.drawGraph_(this.rawData_);
  }
};

/**
 * Adjusts the number of days in the rolling average. Updates the graph to
 * reflect the new averaging period.
 * @param {Number} length Number of days over which to average the data.
 */
DateGraph.prototype.adjustRoll = function(length) {
  this.rollPeriod_ = length;
  this.drawGraph_(this.rawData_);
};
